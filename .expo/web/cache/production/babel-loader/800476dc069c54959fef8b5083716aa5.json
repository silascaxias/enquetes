{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createIconSet;exports.DEFAULT_ICON_COLOR=exports.DEFAULT_ICON_SIZE=exports.NativeIconAPI=void 0;var _toConsumableArray2=_interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));var _regenerator=_interopRequireDefault(require(\"@babel/runtime/regenerator\"));var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _react=_interopRequireWildcard(require(\"react\"));var _propTypes=_interopRequireDefault(require(\"prop-types\"));var _reactNative=require(\"./react-native\");var _ensureNativeModuleAvailable=_interopRequireDefault(require(\"./ensure-native-module-available\"));var _createIconSourceCache=_interopRequireDefault(require(\"./create-icon-source-cache\"));var _iconButton=_interopRequireDefault(require(\"./icon-button\"));var _tabBarItemIos=_interopRequireDefault(require(\"./tab-bar-item-ios\"));function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}var NativeIconAPI=_reactNative.NativeModules.RNVectorIconsManager||_reactNative.NativeModules.RNVectorIconsModule;exports.NativeIconAPI=NativeIconAPI;var DEFAULT_ICON_SIZE=12;exports.DEFAULT_ICON_SIZE=DEFAULT_ICON_SIZE;var DEFAULT_ICON_COLOR='black';exports.DEFAULT_ICON_COLOR=DEFAULT_ICON_COLOR;function createIconSet(glyphMap,fontFamily,fontFile,fontStyle){var fontBasename=fontFile?fontFile.replace(/\\.(otf|ttf)$/,''):fontFamily;var fontReference=_reactNative.Platform.select({windows:\"/Assets/\"+fontFile+\"#\"+fontFamily,android:fontBasename,web:fontBasename,default:fontFamily});var IconNamePropType=_propTypes.default.oneOf(Object.keys(glyphMap));var Icon=function(_PureComponent){(0,_inherits2.default)(Icon,_PureComponent);var _super=_createSuper(Icon);function Icon(){var _this;(0,_classCallCheck2.default)(this,Icon);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.root=null;_this.handleRef=function(ref){_this.root=ref;};return _this;}(0,_createClass2.default)(Icon,[{key:\"setNativeProps\",value:function setNativeProps(nativeProps){if(this.root){this.root.setNativeProps(nativeProps);}}},{key:\"render\",value:function render(){var _this$props=this.props,name=_this$props.name,size=_this$props.size,color=_this$props.color,style=_this$props.style,children=_this$props.children,props=(0,_objectWithoutProperties2.default)(_this$props,[\"name\",\"size\",\"color\",\"style\",\"children\"]);var glyph=name?glyphMap[name]||'?':'';if(typeof glyph==='number'){glyph=String.fromCodePoint(glyph);}var styleDefaults={fontSize:size,color:color};var styleOverrides={fontFamily:fontReference,fontWeight:'normal',fontStyle:'normal'};props.style=[styleDefaults,style,styleOverrides,fontStyle||{}];props.ref=this.handleRef;return _react.default.createElement(_reactNative.Text,props,glyph,children);}}]);return Icon;}(_react.PureComponent);Icon.propTypes={allowFontScaling:_propTypes.default.bool,name:IconNamePropType,size:_propTypes.default.number,color:_propTypes.default.any,children:_propTypes.default.node,style:_propTypes.default.any};Icon.defaultProps={size:DEFAULT_ICON_SIZE,allowFontScaling:false};var imageSourceCache=(0,_createIconSourceCache.default)();function resolveGlyph(name){var glyph=glyphMap[name]||'?';if(typeof glyph==='number'){return String.fromCodePoint(glyph);}return glyph;}function getImageSourceSync(name){var size=arguments.length>1&&arguments[1]!==undefined?arguments[1]:DEFAULT_ICON_SIZE;var color=arguments.length>2&&arguments[2]!==undefined?arguments[2]:DEFAULT_ICON_COLOR;(0,_ensureNativeModuleAvailable.default)();var glyph=resolveGlyph(name);var processedColor=(0,_reactNative.processColor)(color);var cacheKey=glyph+\":\"+size+\":\"+processedColor;if(imageSourceCache.has(cacheKey)){return imageSourceCache.get(cacheKey);}try{var imagePath=NativeIconAPI.getImageForFontSync(fontReference,glyph,size,processedColor);var value={uri:imagePath,scale:_reactNative.PixelRatio.get()};imageSourceCache.setValue(cacheKey,value);return value;}catch(error){imageSourceCache.setError(cacheKey,error);throw error;}}function getImageSource(name){var size,color,glyph,processedColor,cacheKey,imagePath,value,_args=arguments;return _regenerator.default.async(function getImageSource$(_context){while(1){switch(_context.prev=_context.next){case 0:size=_args.length>1&&_args[1]!==undefined?_args[1]:DEFAULT_ICON_SIZE;color=_args.length>2&&_args[2]!==undefined?_args[2]:DEFAULT_ICON_COLOR;(0,_ensureNativeModuleAvailable.default)();glyph=resolveGlyph(name);processedColor=(0,_reactNative.processColor)(color);cacheKey=glyph+\":\"+size+\":\"+processedColor;if(!imageSourceCache.has(cacheKey)){_context.next=8;break;}return _context.abrupt(\"return\",imageSourceCache.get(cacheKey));case 8:_context.prev=8;_context.next=11;return _regenerator.default.awrap(NativeIconAPI.getImageForFont(fontReference,glyph,size,processedColor));case 11:imagePath=_context.sent;value={uri:imagePath,scale:_reactNative.PixelRatio.get()};imageSourceCache.setValue(cacheKey,value);return _context.abrupt(\"return\",value);case 17:_context.prev=17;_context.t0=_context[\"catch\"](8);imageSourceCache.setError(cacheKey,_context.t0);throw _context.t0;case 21:case\"end\":return _context.stop();}}},null,null,[[8,17]],Promise);}function loadFont(){var file,_args2=arguments;return _regenerator.default.async(function loadFont$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:file=_args2.length>0&&_args2[0]!==undefined?_args2[0]:fontFile;if(!(_reactNative.Platform.OS==='ios')){_context2.next=7;break;}(0,_ensureNativeModuleAvailable.default)();if(file){_context2.next=5;break;}throw new Error('Unable to load font, because no file was specified. ');case 5:_context2.next=7;return _regenerator.default.awrap(NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI,(0,_toConsumableArray2.default)(file.split('.'))));case 7:case\"end\":return _context2.stop();}}},null,null,null,Promise);}function hasIcon(name){return Object.prototype.hasOwnProperty.call(glyphMap,name);}function getRawGlyphMap(){return glyphMap;}function getFontFamily(){return fontReference;}Icon.Button=(0,_iconButton.default)(Icon);Icon.TabBarItem=(0,_tabBarItemIos.default)(IconNamePropType,getImageSource);Icon.TabBarItemIOS=Icon.TabBarItem;Icon.getImageSource=getImageSource;Icon.getImageSourceSync=getImageSourceSync;Icon.loadFont=loadFont;Icon.hasIcon=hasIcon;Icon.getRawGlyphMap=getRawGlyphMap;Icon.getFontFamily=getFontFamily;return Icon;}","map":{"version":3,"sources":["/Users/scaxias/Projetos/Estudos/Enquetes/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"names":["NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","Platform","select","windows","android","web","default","IconNamePropType","PropTypes","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCodePoint","styleDefaults","fontSize","styleOverrides","fontWeight","PureComponent","propTypes","allowFontScaling","bool","number","any","node","defaultProps","imageSourceCache","resolveGlyph","getImageSourceSync","processedColor","cacheKey","has","get","imagePath","getImageForFontSync","value","uri","scale","PixelRatio","setValue","error","setError","getImageSource","getImageForFont","loadFont","file","OS","Error","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconSourceCache from './create-icon-source-cache';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `/Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    root = null;\n\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCodePoint(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = createIconSourceCache();\n\n  function resolveGlyph(name) {\n    const glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      return String.fromCodePoint(glyph);\n    }\n    return glyph;\n  }\n\n  function getImageSourceSync(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = NativeIconAPI.getImageForFontSync(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    const glyph = resolveGlyph(name);\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n\n    if (imageSourceCache.has(cacheKey)) {\n      return imageSourceCache.get(cacheKey);\n    }\n    try {\n      const imagePath = await NativeIconAPI.getImageForFont(\n        fontReference,\n        glyph,\n        size,\n        processedColor\n      );\n      const value = { uri: imagePath, scale: PixelRatio.get() };\n      imageSourceCache.setValue(cacheKey, value);\n      return value;\n    } catch (error) {\n      imageSourceCache.setError(cacheKey, error);\n      throw error;\n    }\n  }\n\n  async function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        throw new Error('Unable to load font, because no file was specified. ');\n      }\n      await NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.getImageSource = getImageSource;\n  Icon.getImageSourceSync = getImageSourceSync;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"script"}