{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.CheckboxItem=exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _Checkbox=_interopRequireDefault(require(\"./Checkbox\"));var _Text=_interopRequireDefault(require(\"../Typography/Text\"));var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));var _theming=require(\"../../core/theming\");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var CheckboxItem=function CheckboxItem(_ref){var style=_ref.style,status=_ref.status,label=_ref.label,onPress=_ref.onPress,labelStyle=_ref.labelStyle,colors=_ref.theme.colors,testID=_ref.testID,props=_objectWithoutProperties(_ref,[\"style\",\"status\",\"label\",\"onPress\",\"labelStyle\",\"theme\",\"testID\"]);return React.createElement(_TouchableRipple.default,{onPress:onPress,testID:testID},React.createElement(_reactNative.View,{style:[styles.container,style],pointerEvents:\"none\"},React.createElement(_Text.default,{style:[styles.label,{color:colors.primary},labelStyle]},label),React.createElement(_Checkbox.default,_extends({status:status},props))));};exports.CheckboxItem=CheckboxItem;CheckboxItem.displayName='Checkbox.Item';var _default=(0,_theming.withTheme)(CheckboxItem);exports.default=_default;var styles=_reactNative.StyleSheet.create({container:{flexDirection:'row',alignItems:'center',justifyContent:'space-between',paddingVertical:8,paddingHorizontal:16},label:{fontSize:16}});","map":{"version":3,"sources":["CheckboxItem.tsx"],"names":["CheckboxItem","theme","colors","testID","styles","color","primary","status","withTheme","container","flexDirection","alignItems","justifyContent","paddingVertical","paddingHorizontal","label","fontSize"],"mappings":"6QAAA,oDAEA,yCAQA,4DACA,gEACA,2FACA,2C,+9BAgEA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAA,IAAA,CAAA,IAAC,CAAA,KAAD,CAAA,IAAA,CAAC,KAAD,CAAC,MAAD,CAAA,IAAA,CAAC,MAAD,CAAC,KAAD,CAAA,IAAA,CAAC,KAAD,CAAC,OAAD,CAAA,IAAA,CAAC,OAAD,CAAC,UAAD,CAAA,IAAA,CAAC,UAAD,CAMVE,MANU,CAAA,IAAA,CAMnBD,KANmB,CAMVC,MANU,CAOnBC,MAPmB,CAAA,IAAA,CAOnBA,MAPmB,CAAA,KAAA,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,OAAA,CAAA,QAAA,CAAA,OAAA,CAAA,SAAA,CAAA,YAAA,CAAA,OAAA,CAAA,QAAA,CAAA,CAAA,CAAA,MAUnB,CAAA,KAAA,CAAA,aAAA,CAAA,wBAAA,CAAA,CAAiB,OAAO,CAAxB,OAAA,CAAmC,MAAM,CAAEA,MAA3C,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,CAAM,KAAK,CAAE,CAACC,MAAM,CAAP,SAAA,CAAb,KAAa,CAAb,CAAwC,aAAa,CAAC,MAAtD,CAAA,CACE,KAAA,CAAA,aAAA,CAAA,aAAA,CAAA,CAAM,KAAK,CAAE,CAACA,MAAM,CAAP,KAAA,CAAe,CAAEC,KAAK,CAAEH,MAAM,CAACI,OAAhB,CAAf,CAAA,UAAA,CAAb,CAAA,CADF,KACE,CADF,CAIE,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,CAAU,MAAM,CAAEC,MAAlB,CAAA,CAfe,KAef,CAAA,CAJF,CADF,CAVmB,CAArB,CAAA,C,kCAoBAP,YAAY,CAAZA,WAAAA,CAAAA,eAAAA,C,aAEeQ,uBAAf,YAAeA,C,0BAKf,GAAMJ,CAAAA,MAAM,CAAG,wBAAA,MAAA,CAAkB,CAC/BK,SAAS,CAAE,CACTC,aAAa,CADJ,KAAA,CAETC,UAAU,CAFD,QAAA,CAGTC,cAAc,CAHL,eAAA,CAITC,eAAe,CAJN,CAAA,CAKTC,iBAAiB,CAAE,EALV,CADoB,CAQ/BC,KAAK,CAAE,CACLC,QAAQ,CAAE,EADL,CARwB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\n\nimport {\n  StyleProp,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport CheckBox from './Checkbox';\nimport Text from '../Typography/Text';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\n\ntype Props = {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Label to be displayed on the item.\n   */\n  label: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * Additional styles for container View.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Style that is passed to Label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n/**\n * Checkbox.Item allows you to press the whole row (item) instead of only the Checkbox.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Checkbox } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Checkbox.Item label=\"Item\" status=\"checked\" />\n *   </View>\n * );\n *\n * export default MyComponent;\n *```\n */\n\nconst CheckboxItem = ({\n  style,\n  status,\n  label,\n  onPress,\n  labelStyle,\n  theme: { colors },\n  testID,\n  ...props\n}: Props) => (\n  <TouchableRipple onPress={onPress} testID={testID}>\n    <View style={[styles.container, style]} pointerEvents=\"none\">\n      <Text style={[styles.label, { color: colors.primary }, labelStyle]}>\n        {label}\n      </Text>\n      <CheckBox status={status} {...props}></CheckBox>\n    </View>\n  </TouchableRipple>\n);\n\nCheckboxItem.displayName = 'Checkbox.Item';\n\nexport default withTheme(CheckboxItem);\n\n// @component-docs ignore-next-line\nexport { CheckboxItem };\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingVertical: 8,\n    paddingHorizontal: 16,\n  },\n  label: {\n    fontSize: 16,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}