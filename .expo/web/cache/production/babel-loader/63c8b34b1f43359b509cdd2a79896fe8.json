{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var _objectWithoutProperties2=_interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _get3=_interopRequireDefault(require(\"@babel/runtime/helpers/get\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _hammerjs=_interopRequireDefault(require(\"@egjs/hammerjs\"));var _DiscreteGestureHandler=_interopRequireDefault(require(\"./DiscreteGestureHandler\"));var _utils=require(\"./utils\");function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}var TapGestureHandler=function(_DiscreteGestureHandl){(0,_inherits2.default)(TapGestureHandler,_DiscreteGestureHandl);var _super=_createSuper(TapGestureHandler);function TapGestureHandler(){var _this;(0,_classCallCheck2.default)(this,TapGestureHandler);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.onSuccessfulTap=function(ev){if(_this._getPendingGestures().length){_this._shouldFireEndEvent=ev;return;}if(ev.eventType===_hammerjs.default.INPUT_END){_this.sendEvent((0,_extends2.default)({},ev,{eventType:_hammerjs.default.INPUT_MOVE}));}_this.sendEvent((0,_extends2.default)({},ev,{isFinal:true}));_this.onGestureEnded(ev);};return _this;}(0,_createClass2.default)(TapGestureHandler,[{key:\"simulateCancelEvent\",value:function simulateCancelEvent(inputData){if(this.isGestureRunning){this.cancelEvent(inputData);}}},{key:\"onGestureActivated\",value:function onGestureActivated(ev){if(this.isGestureRunning){this.onSuccessfulTap(ev);}}},{key:\"onRawEvent\",value:function onRawEvent(ev){var _this2=this;(0,_get3.default)((0,_getPrototypeOf2.default)(TapGestureHandler.prototype),\"onRawEvent\",this).call(this,ev);if(!this.hasGestureFailed&&!this.isGestureRunning&&!ev.isFinal){var gesture=this.hammer.get(this.name);if(gesture.options.enable(gesture,ev)){clearTimeout(this._multiTapTimer);this.onStart(ev);this.sendEvent(ev);}}if(ev.isFinal&&ev.maxPointers>1){setTimeout(function(){if(_this2.isGestureRunning){_this2.cancelEvent(ev);}});}if(this.hasGestureFailed){return;}if(ev.isFinal){if(ev.maxPointers>1){setTimeout(function(){if(_this2.isGestureRunning){_this2.cancelEvent(ev);}});}clearTimeout(this._timer);this._timer=setTimeout(function(){_this2.hasGestureFailed=true;_this2.cancelEvent(ev);},this.maxDelayMs);}else if(!this.hasGestureFailed&&!this.isGestureRunning){var _gesture=this.hammer.get(this.name);if(_gesture.options.enable(_gesture,ev)){clearTimeout(this._multiTapTimer);this.onStart(ev);this.sendEvent(ev);}}}},{key:\"getHammerConfig\",value:function getHammerConfig(){return(0,_extends2.default)({},(0,_get3.default)((0,_getPrototypeOf2.default)(TapGestureHandler.prototype),\"getHammerConfig\",this).call(this),{event:this.name,taps:(0,_utils.isnan)(this.config.numberOfTaps)?1:this.config.numberOfTaps,interval:this.maxDelayMs,time:(0,_utils.isnan)(this.config.maxDurationMs)||this.config.maxDurationMs==null?250:this.config.maxDurationMs});}},{key:\"updateGestureConfig\",value:function updateGestureConfig(_ref){var _ref$shouldCancelWhen=_ref.shouldCancelWhenOutside,shouldCancelWhenOutside=_ref$shouldCancelWhen===void 0?true:_ref$shouldCancelWhen,_ref$maxDeltaX=_ref.maxDeltaX,maxDeltaX=_ref$maxDeltaX===void 0?Number.NaN:_ref$maxDeltaX,_ref$maxDeltaY=_ref.maxDeltaY,maxDeltaY=_ref$maxDeltaY===void 0?Number.NaN:_ref$maxDeltaY,_ref$numberOfTaps=_ref.numberOfTaps,numberOfTaps=_ref$numberOfTaps===void 0?1:_ref$numberOfTaps,_ref$minDurationMs=_ref.minDurationMs,minDurationMs=_ref$minDurationMs===void 0?525:_ref$minDurationMs,_ref$maxDelayMs=_ref.maxDelayMs,maxDelayMs=_ref$maxDelayMs===void 0?Number.NaN:_ref$maxDelayMs,_ref$maxDurationMs=_ref.maxDurationMs,maxDurationMs=_ref$maxDurationMs===void 0?Number.NaN:_ref$maxDurationMs,_ref$maxDist=_ref.maxDist,maxDist=_ref$maxDist===void 0?2:_ref$maxDist,_ref$minPointers=_ref.minPointers,minPointers=_ref$minPointers===void 0?1:_ref$minPointers,_ref$maxPointers=_ref.maxPointers,maxPointers=_ref$maxPointers===void 0?1:_ref$maxPointers,props=(0,_objectWithoutProperties2.default)(_ref,[\"shouldCancelWhenOutside\",\"maxDeltaX\",\"maxDeltaY\",\"numberOfTaps\",\"minDurationMs\",\"maxDelayMs\",\"maxDurationMs\",\"maxDist\",\"minPointers\",\"maxPointers\"]);return(0,_get3.default)((0,_getPrototypeOf2.default)(TapGestureHandler.prototype),\"updateGestureConfig\",this).call(this,(0,_extends2.default)({shouldCancelWhenOutside:shouldCancelWhenOutside,numberOfTaps:numberOfTaps,maxDeltaX:maxDeltaX,maxDeltaY:maxDeltaY,minDurationMs:minDurationMs,maxDelayMs:maxDelayMs,maxDist:maxDist,minPointers:minPointers,maxPointers:maxPointers},props));}},{key:\"onGestureEnded\",value:function onGestureEnded(){var _get2;clearTimeout(this._timer);for(var _len2=arguments.length,props=new Array(_len2),_key2=0;_key2<_len2;_key2++){props[_key2]=arguments[_key2];}(_get2=(0,_get3.default)((0,_getPrototypeOf2.default)(TapGestureHandler.prototype),\"onGestureEnded\",this)).call.apply(_get2,[this].concat(props));}},{key:\"onWaitingEnded\",value:function onWaitingEnded(gesture){if(this._shouldFireEndEvent){this.onSuccessfulTap(this._shouldFireEndEvent);this._shouldFireEndEvent=null;}}},{key:\"name\",get:function get(){return'tap';}},{key:\"NativeGestureClass\",get:function get(){return _hammerjs.default.Tap;}},{key:\"maxDelayMs\",get:function get(){return(0,_utils.isnan)(this.config.maxDelayMs)?300:this.config.maxDelayMs;}}]);return TapGestureHandler;}(_DiscreteGestureHandler.default);var _default=TapGestureHandler;exports.default=_default;","map":{"version":3,"sources":["/Users/scaxias/Projetos/Estudos/Enquetes/node_modules/react-native-gesture-handler/web/TapGestureHandler.js"],"names":["TapGestureHandler","onSuccessfulTap","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","Hammer","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","inputData","isGestureRunning","cancelEvent","hasGestureFailed","gesture","hammer","get","name","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","maxDelayMs","event","taps","config","numberOfTaps","interval","time","maxDurationMs","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","Tap","DiscreteGestureHandler"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = ev => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props) {\n    clearTimeout(this._timer);\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(gesture) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"]},"metadata":{},"sourceType":"script"}