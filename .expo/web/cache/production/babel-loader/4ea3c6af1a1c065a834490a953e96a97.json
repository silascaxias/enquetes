{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.TextInputAffix=exports.default=exports.AffixAdornment=void 0;var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _react=_interopRequireDefault(require(\"react\"));var _color=_interopRequireDefault(require(\"color\"));var _reactNative=require(\"react-native\");var _theming=require(\"../../../core/theming\");var _enums=require(\"./enums\");var AFFIX_OFFSET=12;var AffixContext=_react.default.createContext({textStyle:{fontFamily:'',color:''},topPosition:null,side:_enums.AdornmentSide.Left});var AffixAdornment=function AffixAdornment(_ref){var affix=_ref.affix,side=_ref.side,textStyle=_ref.textStyle,topPosition=_ref.topPosition,onLayout=_ref.onLayout,visible=_ref.visible;return _react.default.createElement(AffixContext.Provider,{value:{side:side,textStyle:textStyle,topPosition:topPosition,onLayout:onLayout,visible:visible}},affix);};exports.AffixAdornment=AffixAdornment;var TextInputAffix=function TextInputAffix(_ref2){var text=_ref2.text,theme=_ref2.theme;var _React$useContext=_react.default.useContext(AffixContext),textStyle=_React$useContext.textStyle,onLayout=_React$useContext.onLayout,topPosition=_React$useContext.topPosition,side=_React$useContext.side,visible=_React$useContext.visible;var textColor=(0,_color.default)(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var style=(0,_defineProperty2.default)({top:topPosition},side,AFFIX_OFFSET);return _react.default.createElement(_reactNative.Animated.View,{style:[styles.container,style,{opacity:(visible===null||visible===void 0?void 0:visible.interpolate({inputRange:[0,1],outputRange:[1,0]}))||1}],onLayout:onLayout},_react.default.createElement(_reactNative.Text,{style:[{color:textColor},textStyle]},text));};exports.TextInputAffix=TextInputAffix;TextInputAffix.displayName='TextInput.Affix';var styles=_reactNative.StyleSheet.create({container:{position:'absolute',justifyContent:'center',alignItems:'center'}});var _default=(0,_theming.withTheme)(TextInputAffix);exports.default=_default;","map":{"version":3,"sources":["Affix.tsx"],"names":["AFFIX_OFFSET","AffixContext","textStyle","fontFamily","color","topPosition","side","AdornmentSide","Left","AffixAdornment","visible","onLayout","TextInputAffix","theme","React","textColor","style","top","styles","opacity","inputRange","outputRange","container","position","justifyContent","alignItems","withTheme"],"mappings":"+SAAA,oDACA,oDACA,yCASA,8CACA,8BAEA,GAAMA,CAAAA,YAAY,CAAlB,EAAA,CAmBA,GAAMC,CAAAA,YAAY,CAAG,eAAA,aAAA,CAAkC,CACrDC,SAAS,CAAE,CAAEC,UAAU,CAAZ,EAAA,CAAkBC,KAAK,CAAE,EAAzB,CAD0C,CAErDC,WAAW,CAF0C,IAAA,CAGrDC,IAAI,CAAEC,qBAAcC,IAHiC,CAAlC,CAArB,CAMO,GAAMC,CAAAA,cAKZ,CAAG,QALSA,CAAAA,cAKT,MAAgE,IAA/D,CAAA,KAA+D,MAA/D,KAA+D,CAA/D,IAA+D,MAA/D,IAA+D,CAA/D,SAA+D,MAA/D,SAA+D,CAA/D,WAA+D,MAA/D,WAA+D,CAA/D,QAA+D,MAA/D,QAA+D,CAAdC,OAAc,MAAdA,OAAc,CAClE,MACE,gBAAA,aAAA,CAAC,YAAD,CAAA,QAAA,CAAA,CACE,KAAK,CAAE,CACLJ,IADK,CACLA,IADK,CAELJ,SAFK,CAELA,SAFK,CAGLG,WAHK,CAGLA,WAHK,CAILM,QAJK,CAILA,QAJK,CAKLD,OAAAA,CAAAA,OALK,CADT,CAAA,CADF,KACE,CADF,CANK,CAAA,C,sCAqBP,GAAME,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,OAA4B,IAA3B,CAAA,IAA2B,OAA3B,IAA2B,CAAnBC,KAAmB,OAAnBA,KAAmB,uBACWC,eAAAA,UAAAA,CAA5D,YAA4DA,CADX,CAC3C,SAD2C,mBAC3C,SAD2C,CAC3C,QAD2C,mBAC3C,QAD2C,CAC3C,WAD2C,mBAC3C,WAD2C,CAC3C,IAD2C,mBAC3C,IAD2C,CACDJ,OADC,mBACDA,OADC,CAIjD,GAAMK,CAAAA,SAAS,CAAGX,mBAAMS,KAAK,CAALA,MAAAA,CAANT,IAAAA,EAAAA,KAAAA,CACTS,KAAK,CAALA,IAAAA,CAAAA,GAAAA,CADST,IAAAA,EAAAA,GAAAA,GAAlB,MAAkBA,EAAlB,CAKA,GAAMY,CAAAA,KAAK,+BACTC,GAAG,CADS,WAAH,EAET,IAFS,CAEDjB,YAFC,CAAX,CAKA,MACE,gBAAA,aAAA,CAAA,sBAAA,IAAA,CAAA,CACE,KAAK,CAAE,CACLkB,MAAM,CADD,SAAA,CAAA,KAAA,CAGL,CACEC,OAAO,CACL,CAAA,OAAO,GAAP,IAAA,EAAA,OAAO,GAAA,IAAP,EAAA,CAAA,IAAA,EAAA,CAAA,OAAO,CAAP,WAAA,CAAqB,CACnBC,UAAU,CAAE,CAAA,CAAA,CADO,CACP,CADO,CAEnBC,WAAW,CAAE,CAAA,CAAA,CAAA,CAAA,CAFM,CAArB,CAAA,GAGM,CALV,CAHK,CADT,CAYE,QAAQ,CAAEV,QAZZ,CAAA,CAcE,eAAA,aAAA,CAAA,iBAAA,CAAA,CAAM,KAAK,CAAE,CAAC,CAAEP,KAAK,CAAEW,SAAT,CAAD,CAAA,SAAA,CAAb,CAAA,CAfJ,IAeI,CAdF,CADF,CAdF,CAAA,C,sCAiCAH,cAAc,CAAdA,WAAAA,CAAAA,iBAAAA,CAEA,GAAMM,CAAAA,MAAM,CAAG,wBAAA,MAAA,CAAkB,CAC/BI,SAAS,CAAE,CACTC,QAAQ,CADC,UAAA,CAETC,cAAc,CAFL,QAAA,CAGTC,UAAU,CAAE,QAHH,CADoB,CAAlB,CAAf,C,aAQeC,uBAAf,cAAeA,C","sourcesContent":["import React from 'react';\nimport color from 'color';\nimport {\n  Text,\n  StyleSheet,\n  StyleProp,\n  TextStyle,\n  LayoutChangeEvent,\n  Animated,\n} from 'react-native';\n\nimport { withTheme } from '../../../core/theming';\nimport { AdornmentSide } from './enums';\n\nconst AFFIX_OFFSET = 12;\n\ntype Props = {\n  text: string;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\ntype ContextState = {\n  topPosition: number | null;\n  onLayout?: (event: LayoutChangeEvent) => void;\n  visible?: Animated.Value;\n  textStyle?: StyleProp<TextStyle>;\n  side: AdornmentSide;\n};\n\nconst AffixContext = React.createContext<ContextState>({\n  textStyle: { fontFamily: '', color: '' },\n  topPosition: null,\n  side: AdornmentSide.Left,\n});\n\nexport const AffixAdornment: React.FunctionComponent<\n  {\n    affix: React.ReactNode;\n    testID: string;\n  } & ContextState\n> = ({ affix, side, textStyle, topPosition, onLayout, visible }) => {\n  return (\n    <AffixContext.Provider\n      value={{\n        side,\n        textStyle,\n        topPosition,\n        onLayout,\n        visible,\n      }}\n    >\n      {affix}\n    </AffixContext.Provider>\n  );\n};\n\nconst TextInputAffix = ({ text, theme }: Props) => {\n  const { textStyle, onLayout, topPosition, side, visible } = React.useContext(\n    AffixContext\n  );\n  const textColor = color(theme.colors.text)\n    .alpha(theme.dark ? 0.7 : 0.54)\n    .rgb()\n    .string();\n\n  const style = {\n    top: topPosition,\n    [side]: AFFIX_OFFSET,\n  };\n\n  return (\n    <Animated.View\n      style={[\n        styles.container,\n        style,\n        {\n          opacity:\n            visible?.interpolate({\n              inputRange: [0, 1],\n              outputRange: [1, 0],\n            }) || 1,\n        },\n      ]}\n      onLayout={onLayout}\n    >\n      <Text style={[{ color: textColor }, textStyle]}>{text}</Text>\n    </Animated.View>\n  );\n};\nTextInputAffix.displayName = 'TextInput.Affix';\n\nconst styles = StyleSheet.create({\n  container: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default withTheme(TextInputAffix);\n\n// @component-docs ignore-next-line\nexport { TextInputAffix };\n"]},"metadata":{},"sourceType":"script"}