{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=exports.ToggleButtonGroupContext=void 0;var React=_interopRequireWildcard(require(\"react\"));var ToggleButtonGroupContext=React.createContext(null);exports.ToggleButtonGroupContext=ToggleButtonGroupContext;var ToggleButtonGroup=function ToggleButtonGroup(_ref){var value=_ref.value,onValueChange=_ref.onValueChange,children=_ref.children;return React.createElement(ToggleButtonGroupContext.Provider,{value:{value:value,onValueChange:onValueChange}},children);};ToggleButtonGroup.displayName='ToggleButton.Group';var _default=ToggleButtonGroup;exports.default=_default;","map":{"version":3,"sources":["ToggleButtonGroup.tsx"],"names":["ToggleButtonGroupContext","React","ToggleButtonGroup","children","value","onValueChange"],"mappings":"sMAAA,oDAsBO,GAAMA,CAAAA,wBAAwB,CAAGC,KAAK,CAALA,aAAAA,CAAjC,IAAiCA,CAAjC,C,0DAmCP,GAAMC,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,UAAC,CAAA,KAAD,MAAC,KAAD,CAAC,aAAD,MAAC,aAAD,CAAyBC,QAAzB,MAAyBA,QAAzB,OACxB,CAAA,KAAA,CAAA,aAAA,CAAC,wBAAD,CAAA,QAAA,CAAA,CACE,KAAK,CAAE,CACLC,KADK,CACLA,KADK,CAELC,aAAAA,CAAAA,aAFK,CADT,CAAA,CADF,QACE,CADwB,EAA1B,CAWAH,iBAAiB,CAAjBA,WAAAA,CAAAA,oBAAAA,C,aAEA,iB","sourcesContent":["import * as React from 'react';\n\ntype Props = {\n  /**\n   * Function to execute on selection change.\n   */\n  onValueChange: (value: string) => void;\n  /**\n   * Value of the currently selected toggle button.\n   */\n  value: string;\n  /**\n   * React elements containing toggle buttons.\n   */\n  children: React.ReactNode;\n};\n\ntype ToggleButtonContextType = {\n  value: string;\n  onValueChange: (item: string) => void;\n};\n\nexport const ToggleButtonGroupContext = React.createContext<\n  ToggleButtonContextType\n>(null as any);\n\n/**\n * Toggle group allows to control a group of toggle buttons.</br>\n * It doesn't change the appearance of the toggle buttons. If you want to group them in a row, check out <a href=\"react-native-paper/toggle-button-row.html\">`ToggleButton.Row`</a>.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/toggle-button-group.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [value, setValue] = React.useState('left');\n *\n *   return (\n *     <ToggleButton.Group\n *       onValueChange={value => setValue(value)}\n *       value={value}>\n *       <ToggleButton icon=\"format-align-left\" value=\"left\" />\n *       <ToggleButton icon=\"format-align-right\" value=\"right\" />\n *     </ToggleButton.Group>\n *   );\n * };\n *\n * export default MyComponent;\n *```\n */\nconst ToggleButtonGroup = ({ value, onValueChange, children }: Props) => (\n  <ToggleButtonGroupContext.Provider\n    value={{\n      value,\n      onValueChange,\n    }}\n  >\n    {children}\n  </ToggleButtonGroupContext.Provider>\n);\n\nToggleButtonGroup.displayName = 'ToggleButton.Group';\n\nexport default ToggleButtonGroup;\n"]},"metadata":{},"sourceType":"script"}