{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.CheckboxAndroid=exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _color=_interopRequireDefault(require(\"color\"));var _MaterialCommunityIcon=_interopRequireDefault(require(\"../MaterialCommunityIcon\"));var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));var _theming=require(\"../../core/theming\");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var ANIMATION_DURATION=100;var CheckboxAndroid=function CheckboxAndroid(_ref){var status=_ref.status,theme=_ref.theme,disabled=_ref.disabled,onPress=_ref.onPress,testID=_ref.testID,rest=_objectWithoutProperties(_ref,[\"status\",\"theme\",\"disabled\",\"onPress\",\"testID\"]);var _React$useRef=React.useRef(new _reactNative.Animated.Value(1)),scaleAnim=_React$useRef.current;var scale=theme.animation.scale;React.useEffect(function(){var checked=status==='checked';_reactNative.Animated.sequence([_reactNative.Animated.timing(scaleAnim,{toValue:0.85,duration:checked?ANIMATION_DURATION*scale:0,useNativeDriver:false}),_reactNative.Animated.timing(scaleAnim,{toValue:1,duration:checked?ANIMATION_DURATION*scale:ANIMATION_DURATION*scale*1.75,useNativeDriver:false})]).start();},[status,scaleAnim,scale]);var checked=status==='checked';var indeterminate=status==='indeterminate';var checkedColor=rest.color||theme.colors.accent;var uncheckedColor=rest.uncheckedColor||(0,_color.default)(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var rippleColor,checkboxColor;if(disabled){rippleColor=(0,_color.default)(theme.colors.text).alpha(0.16).rgb().string();checkboxColor=theme.colors.disabled;}else{rippleColor=(0,_color.default)(checkedColor).fade(0.32).rgb().string();checkboxColor=checked?checkedColor:uncheckedColor;}var borderWidth=scaleAnim.interpolate({inputRange:[0.8,1],outputRange:[7,0]});var icon=indeterminate?'minus-box':checked?'checkbox-marked':'checkbox-blank-outline';return React.createElement(_TouchableRipple.default,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:onPress,disabled:disabled,accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:\"button\",accessibilityRole:\"checkbox\",accessibilityState:{disabled:disabled,checked:checked},accessibilityLiveRegion:\"polite\",style:styles.container,testID:testID}),React.createElement(_reactNative.Animated.View,{style:{transform:[{scale:scaleAnim}]}},React.createElement(_MaterialCommunityIcon.default,{allowFontScaling:false,name:icon,size:24,color:checkboxColor,direction:\"ltr\"}),React.createElement(_reactNative.View,{style:[_reactNative.StyleSheet.absoluteFill,styles.fillContainer]},React.createElement(_reactNative.Animated.View,{style:[styles.fill,{borderColor:checkboxColor},{borderWidth:borderWidth}]}))));};exports.CheckboxAndroid=CheckboxAndroid;CheckboxAndroid.displayName='Checkbox.Android';var styles=_reactNative.StyleSheet.create({container:{borderRadius:18,width:36,height:36,padding:6},fillContainer:{alignItems:'center',justifyContent:'center'},fill:{height:14,width:14}});var _default=(0,_theming.withTheme)(CheckboxAndroid);exports.default=_default;","map":{"version":3,"sources":["CheckboxAndroid.tsx"],"names":["ANIMATION_DURATION","CheckboxAndroid","testID","rest","current","scaleAnim","React","Animated","animation","scale","checked","status","toValue","duration","useNativeDriver","indeterminate","checkedColor","theme","uncheckedColor","color","rippleColor","checkboxColor","borderWidth","inputRange","outputRange","icon","disabled","styles","transform","StyleSheet","borderColor","container","borderRadius","width","height","padding","fillContainer","alignItems","justifyContent","fill","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Status of checkbox.\n   */\n  status: 'checked' | 'unchecked' | 'indeterminate';\n  /**\n   * Whether checkbox is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for unchecked checkbox.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for checkbox.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n  /**\n   * testID to be used on tests.\n   */\n  testID?: string;\n};\n\n// From https://material.io/design/motion/speed.html#duration\nconst ANIMATION_DURATION = 100;\n\n/**\n * Checkboxes allow the selection of multiple options from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/checkbox-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/checkbox-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst CheckboxAndroid = ({\n  status,\n  theme,\n  disabled,\n  onPress,\n  testID,\n  ...rest\n}: Props) => {\n  const { current: scaleAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    const checked = status === 'checked';\n\n    Animated.sequence([\n      Animated.timing(scaleAnim, {\n        toValue: 0.85,\n        duration: checked ? ANIMATION_DURATION * scale : 0,\n        useNativeDriver: false,\n      }),\n      Animated.timing(scaleAnim, {\n        toValue: 1,\n        duration: checked\n          ? ANIMATION_DURATION * scale\n          : ANIMATION_DURATION * scale * 1.75,\n        useNativeDriver: false,\n      }),\n    ]).start();\n  }, [status, scaleAnim, scale]);\n\n  const checked = status === 'checked';\n  const indeterminate = status === 'indeterminate';\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor, checkboxColor;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n    checkboxColor = theme.colors.disabled;\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n    checkboxColor = checked ? checkedColor : uncheckedColor;\n  }\n\n  const borderWidth = scaleAnim.interpolate({\n    inputRange: [0.8, 1],\n    outputRange: [7, 0],\n  });\n\n  const icon = indeterminate\n    ? 'minus-box'\n    : checked\n    ? 'checkbox-marked'\n    : 'checkbox-blank-outline';\n\n  return (\n    <TouchableRipple\n      {...rest}\n      borderless\n      rippleColor={rippleColor}\n      onPress={onPress}\n      disabled={disabled}\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"checkbox\"\n      accessibilityState={{ disabled, checked }}\n      accessibilityLiveRegion=\"polite\"\n      style={styles.container}\n      testID={testID}\n    >\n      <Animated.View style={{ transform: [{ scale: scaleAnim }] }}>\n        <MaterialCommunityIcon\n          allowFontScaling={false}\n          name={icon}\n          size={24}\n          color={checkboxColor}\n          direction=\"ltr\"\n        />\n        <View style={[StyleSheet.absoluteFill, styles.fillContainer]}>\n          <Animated.View\n            style={[\n              styles.fill,\n              { borderColor: checkboxColor },\n              { borderWidth },\n            ]}\n          />\n        </View>\n      </Animated.View>\n    </TouchableRipple>\n  );\n};\n\nCheckboxAndroid.displayName = 'Checkbox.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    width: 36,\n    height: 36,\n    padding: 6,\n  },\n  fillContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  fill: {\n    height: 14,\n    width: 14,\n  },\n});\n\nexport default withTheme(CheckboxAndroid);\n\n// @component-docs ignore-next-line\nexport { CheckboxAndroid };\n"]},"metadata":{},"sourceType":"script"}