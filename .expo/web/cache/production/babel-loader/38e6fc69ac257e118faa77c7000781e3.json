{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.RadioButtonIOS=exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _color=_interopRequireDefault(require(\"color\"));var _RadioButtonGroup=require(\"./RadioButtonGroup\");var _utils=require(\"./utils\");var _MaterialCommunityIcon=_interopRequireDefault(require(\"../MaterialCommunityIcon\"));var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));var _theming=require(\"../../core/theming\");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var RadioButtonIOS=function RadioButtonIOS(_ref){var disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,status=_ref.status,value=_ref.value,rest=_objectWithoutProperties(_ref,[\"disabled\",\"onPress\",\"theme\",\"status\",\"value\"]);var checkedColor=disabled?theme.colors.disabled:rest.color||theme.colors.accent;var rippleColor;if(disabled){rippleColor=(0,_color.default)(theme.colors.text).alpha(0.16).rgb().string();}else{rippleColor=(0,_color.default)(checkedColor).fade(0.32).rgb().string();}return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer,null,function(context){var checked=(0,_utils.isChecked)({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';return React.createElement(_TouchableRipple.default,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(){(0,_utils.handlePress)({onPress:onPress,value:value,onValueChange:context===null||context===void 0?void 0:context.onValueChange});},accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:checked?'radiobutton_checked':'radiobutton_unchecked',accessibilityRole:\"button\",accessibilityState:{disabled:disabled},accessibilityLiveRegion:\"polite\",style:styles.container}),React.createElement(_reactNative.View,{style:{opacity:checked?1:0}},React.createElement(_MaterialCommunityIcon.default,{allowFontScaling:false,name:\"check\",size:24,color:checkedColor,direction:\"ltr\"})));});};exports.RadioButtonIOS=RadioButtonIOS;RadioButtonIOS.displayName='RadioButton.IOS';var styles=_reactNative.StyleSheet.create({container:{borderRadius:18,padding:6}});var _default=(0,_theming.withTheme)(RadioButtonIOS);exports.default=_default;","map":{"version":3,"sources":["RadioButtonIOS.tsx"],"names":["RadioButtonIOS","value","rest","checkedColor","disabled","theme","rippleColor","color","context","checked","contextValue","status","handlePress","onPress","onValueChange","styles","container","opacity","borderRadius","padding","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport MaterialCommunityIcon from '../MaterialCommunityIcon';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: () => void;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for iOS, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.ios.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.ios.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonIOS = ({\n  disabled,\n  onPress,\n  theme,\n  status,\n  value,\n  ...rest\n}: Props) => {\n  const checkedColor = disabled\n    ? theme.colors.disabled\n    : rest.color || theme.colors.accent;\n\n  let rippleColor: string;\n\n  if (disabled) {\n    rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n  } else {\n    rippleColor = color(checkedColor).fade(0.32).rgb().string();\n  }\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      value,\n                      onValueChange: context?.onValueChange,\n                    });\n                  }\n            }\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"button\"\n            accessibilityState={{ disabled }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n          >\n            <View style={{ opacity: checked ? 1 : 0 }}>\n              <MaterialCommunityIcon\n                allowFontScaling={false}\n                name=\"check\"\n                size={24}\n                color={checkedColor}\n                direction=\"ltr\"\n              />\n            </View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonIOS.displayName = 'RadioButton.IOS';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n    padding: 6,\n  },\n});\n\nexport default withTheme(RadioButtonIOS);\n\n// @component-docs ignore-next-line\nexport { RadioButtonIOS };\n"]},"metadata":{},"sourceType":"script"}