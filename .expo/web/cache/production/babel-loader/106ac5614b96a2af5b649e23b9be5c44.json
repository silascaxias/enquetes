{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _theming=require(\"../../core/theming\");var _color=_interopRequireDefault(require(\"color\"));var _IconButton=_interopRequireDefault(require(\"../IconButton\"));var _ToggleButtonGroup=_interopRequireWildcard(require(\"./ToggleButtonGroup\"));var _ToggleButtonRow=_interopRequireDefault(require(\"./ToggleButtonRow\"));var _colors=require(\"../../styles/colors\");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var ToggleButton=function ToggleButton(_ref){var icon=_ref.icon,size=_ref.size,theme=_ref.theme,accessibilityLabel=_ref.accessibilityLabel,disabled=_ref.disabled,style=_ref.style,value=_ref.value,status=_ref.status,_onPress=_ref.onPress,rest=_objectWithoutProperties(_ref,[\"icon\",\"size\",\"theme\",\"accessibilityLabel\",\"disabled\",\"style\",\"value\",\"status\",\"onPress\"]);var borderRadius=theme.roundness;return React.createElement(_ToggleButtonGroup.ToggleButtonGroupContext.Consumer,null,function(context){var backgroundColor;var checked=context&&context.value===value||status==='checked';if(checked){backgroundColor=theme.dark?'rgba(255, 255, 255, .12)':'rgba(0, 0, 0, .08)';}else{backgroundColor='transparent';}return React.createElement(_IconButton.default,_extends({borderless:false,icon:icon,onPress:function onPress(e){if(_onPress){_onPress(e);}if(context){context.onValueChange(!checked?value:null);}},size:size,accessibilityLabel:accessibilityLabel,disabled:disabled,style:[styles.content,{backgroundColor:backgroundColor,borderRadius:borderRadius,borderColor:(0,_color.default)(theme.dark?_colors.white:_colors.black).alpha(0.29).rgb().string()},style]},rest));});};ToggleButton.Group=_ToggleButtonGroup.default;ToggleButton.Row=_ToggleButtonRow.default;var styles=_reactNative.StyleSheet.create({content:{width:42,height:42,margin:0}});var _default=(0,_theming.withTheme)(ToggleButton);exports.default=_default;","map":{"version":3,"sources":["ToggleButton.tsx"],"names":["ToggleButton","onPress","rest","borderRadius","theme","context","checked","status","backgroundColor","e","styles","borderColor","color","content","width","height","margin","withTheme"],"mappings":"wPAAA,oDACA,yCAMA,2CACA,oDACA,iEACA,+EAGA,0EACA,2C,+9BA6EA,GAAMA,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAA,IAAA,CAWR,IAXS,CAAA,IAWT,CAAA,IAAA,CAXS,IAWT,CAXS,IAWT,CAAA,IAAA,CAXS,IAWT,CAXS,KAWT,CAAA,IAAA,CAXS,KAWT,CAXS,kBAWT,CAAA,IAAA,CAXS,kBAWT,CAXS,QAWT,CAAA,IAAA,CAXS,QAWT,CAXS,KAWT,CAAA,IAAA,CAXS,KAWT,CAXS,KAWT,CAAA,IAAA,CAXS,KAWT,CAXS,MAWT,CAAA,IAAA,CAXS,MAWT,CAFXC,QAEW,CAAA,IAAA,CAFXA,OAEW,CADRC,IACQ,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,MAAA,CAAA,MAAA,CAAA,OAAA,CAAA,oBAAA,CAAA,UAAA,CAAA,OAAA,CAAA,OAAA,CAAA,QAAA,CAAA,SAAA,CAAA,CAAA,CACX,GAAMC,CAAAA,YAAY,CAAGC,KAAK,CAA1B,SAAA,CAEA,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,4CAAA,QAAA,CAAA,IAAA,CACIC,SAAAA,OAAD,CAAgE,CAC/D,GAAA,CAAA,eAAA,CAEA,GAAMC,CAAAA,OAAuB,CAC1BD,OAAO,EAAIA,OAAO,CAAPA,KAAAA,GAAZ,KAACA,EAAuCE,MAAM,GADhD,SAAA,CAGA,GAAA,OAAA,CAAa,CACXC,eAAe,CAAGJ,KAAK,CAALA,IAAAA,CAAAA,0BAAAA,CAAlBI,oBAAAA,CADF,CAAA,IAIO,CACLA,eAAe,CAAfA,aAAAA,CACD,CAED,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,mBAAA,CAAA,QAAA,CAAA,CACE,UAAU,CADZ,KAAA,CAEE,IAAI,CAFN,IAAA,CAGE,OAAO,CAAGC,iBAAAA,CAAD,CAAwC,CAC/C,GAAA,QAAA,CAAa,CACXR,QAAO,CAAPA,CAAO,CAAPA,CACD,CAED,GAAA,OAAA,CAAa,CACXI,OAAO,CAAPA,aAAAA,CAAsB,CAAA,OAAA,CAAA,KAAA,CAAtBA,IAAAA,EACD,CAVL,CAAA,CAYE,IAAI,CAZN,IAAA,CAaE,kBAAkB,CAbpB,kBAAA,CAcE,QAAQ,CAdV,QAAA,CAeE,KAAK,CAAE,CACLK,MAAM,CADD,OAAA,CAEL,CACEF,eADF,CACEA,eADF,CAEEL,YAFF,CAEEA,YAFF,CAGEQ,WAAW,CAAEC,mBAAMR,KAAK,CAALA,IAAAA,CAAAA,aAAAA,CAANQ,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GAAAA,MAAAA,EAHf,CAFK,CAAA,KAAA,CAfT,CAAA,CADF,IACE,CAAA,CADF,CAhBN,CACE,CADF,CAdF,CAAA,CAmEAZ,YAAY,CAAZA,KAAAA,CAAAA,0BAAAA,CAGAA,YAAY,CAAZA,GAAAA,CAAAA,wBAAAA,CAEA,GAAMU,CAAAA,MAAM,CAAG,wBAAA,MAAA,CAAkB,CAC/BG,OAAO,CAAE,CACPC,KAAK,CADE,EAAA,CAEPC,MAAM,CAFC,EAAA,CAGPC,MAAM,CAAE,CAHD,CADsB,CAAlB,CAAf,C,aAQeC,uBAAf,YAAeA,C","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { withTheme } from '../../core/theming';\nimport color from 'color';\nimport IconButton from '../IconButton';\nimport ToggleButtonGroup, {\n  ToggleButtonGroupContext,\n} from './ToggleButtonGroup';\nimport ToggleButtonRow from './ToggleButtonRow';\nimport { black, white } from '../../styles/colors';\nimport type { IconSource } from '../Icon';\n\ntype Props = {\n  /**\n   * Icon to display for the `ToggleButton`.\n   */\n  icon: IconSource;\n  /**\n   * Size of the icon.\n   */\n  size?: number;\n  /**\n   * Custom text color for button.\n   */\n  color?: string;\n  /**\n   * Whether the button is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Accessibility label for the `ToggleButton`. This is read by the screen reader when the user taps the button.\n   */\n  accessibilityLabel?: string;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (value?: GestureResponderEvent | string) => void;\n  /**\n   * Value of button.\n   */\n  value?: string;\n  /**\n   * Status of button.\n   */\n  status?: 'checked' | 'unchecked';\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Toggle buttons can be used to group related options. To emphasize groups of related toggle buttons,\n * a group should share a common container.\n *\n * <div class=\"screenshots\">\n *   <img class=\"medium\" src=\"screenshots/toggle-button.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ToggleButton } from 'react-native-paper';\n *\n * const ToggleButtonExample = () => {\n *   const [status, setStatus] = React.useState('checked');\n *\n *   const onButtonToggle = value => {\n *     setStatus(status === 'checked' ? 'unchecked' : 'checked');\n *   };\n *\n *   return (\n *     <ToggleButton\n *       icon=\"bluetooth\"\n *       value=\"bluetooth\"\n *       status={status}\n *       onPress={onButtonToggle}\n *     />\n *   );\n * };\n *\n * export default ToggleButtonExample;\n *\n * ```\n */\nconst ToggleButton = ({\n  icon,\n  size,\n  theme,\n  accessibilityLabel,\n  disabled,\n  style,\n  value,\n  status,\n  onPress,\n  ...rest\n}: Props) => {\n  const borderRadius = theme.roundness;\n\n  return (\n    <ToggleButtonGroupContext.Consumer>\n      {(context: { value: string; onValueChange: Function } | null) => {\n        let backgroundColor;\n\n        const checked: boolean | null =\n          (context && context.value === value) || status === 'checked';\n\n        if (checked) {\n          backgroundColor = theme.dark\n            ? 'rgba(255, 255, 255, .12)'\n            : 'rgba(0, 0, 0, .08)';\n        } else {\n          backgroundColor = 'transparent';\n        }\n\n        return (\n          <IconButton\n            borderless={false}\n            icon={icon}\n            onPress={(e?: GestureResponderEvent | string) => {\n              if (onPress) {\n                onPress(e);\n              }\n\n              if (context) {\n                context.onValueChange(!checked ? value : null);\n              }\n            }}\n            size={size}\n            accessibilityLabel={accessibilityLabel}\n            disabled={disabled}\n            style={[\n              styles.content,\n              {\n                backgroundColor,\n                borderRadius,\n                borderColor: color(theme.dark ? white : black)\n                  .alpha(0.29)\n                  .rgb()\n                  .string(),\n              },\n              style,\n            ]}\n            {...rest}\n          />\n        );\n      }}\n    </ToggleButtonGroupContext.Consumer>\n  );\n};\n\n// @component ./ToggleButtonGroup.tsx\nToggleButton.Group = ToggleButtonGroup;\n\n// @component ./ToggleButtonRow.tsx\nToggleButton.Row = ToggleButtonRow;\n\nconst styles = StyleSheet.create({\n  content: {\n    width: 42,\n    height: 42,\n    margin: 0,\n  },\n});\n\nexport default withTheme(ToggleButton);\n"]},"metadata":{},"sourceType":"script"}