{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _color=_interopRequireDefault(require(\"color\"));var _colors=require(\"../styles/colors\");var _theming=require(\"../core/theming\");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var defaultSize=20;var Badge=function Badge(_ref){var children=_ref.children,_ref$size=_ref.size,size=_ref$size===void 0?defaultSize:_ref$size,style=_ref.style,theme=_ref.theme,_ref$visible=_ref.visible,visible=_ref$visible===void 0?true:_ref$visible,rest=_objectWithoutProperties(_ref,[\"children\",\"size\",\"style\",\"theme\",\"visible\"]);var _React$useRef=React.useRef(new _reactNative.Animated.Value(visible?1:0)),opacity=_React$useRef.current;var scale=theme.animation.scale;React.useEffect(function(){_reactNative.Animated.timing(opacity,{toValue:visible?1:0,duration:150*scale,useNativeDriver:true}).start();},[visible,opacity,scale]);var _ref2=_reactNative.StyleSheet.flatten(style)||{},_ref2$backgroundColor=_ref2.backgroundColor,backgroundColor=_ref2$backgroundColor===void 0?theme.colors.notification:_ref2$backgroundColor,restStyle=_objectWithoutProperties(_ref2,[\"backgroundColor\"]);var textColor=(0,_color.default)(backgroundColor).isLight()?_colors.black:_colors.white;var borderRadius=size/2;return React.createElement(_reactNative.Animated.Text,_extends({numberOfLines:1,style:[_objectSpread(_objectSpread({opacity:opacity,backgroundColor:backgroundColor,color:textColor,fontSize:size*0.5},theme.fonts.regular),{},{lineHeight:size,height:size,minWidth:size,borderRadius:borderRadius}),styles.container,restStyle]},rest),children);};var _default=(0,_theming.withTheme)(Badge);exports.default=_default;var styles=_reactNative.StyleSheet.create({container:{alignSelf:'flex-end',textAlign:'center',textAlignVertical:'center',paddingHorizontal:4,overflow:'hidden'}});","map":{"version":3,"sources":["Badge.tsx"],"names":["defaultSize","Badge","size","visible","rest","current","opacity","React","Animated","animation","scale","toValue","duration","useNativeDriver","backgroundColor","theme","notification","StyleSheet","textColor","color","borderRadius","fontSize","lineHeight","height","minWidth","styles","withTheme","container","alignSelf","textAlign","textAlignVertical","paddingHorizontal","overflow"],"mappings":"wPAAA,oDACA,yCACA,oDACA,wCACA,wC,i7DAEA,GAAMA,CAAAA,WAAW,CAAjB,EAAA,CAkDA,GAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAAA,IAAA,CAOD,IAPE,CAAA,QAOF,CAAA,IAAA,CAPE,QAOF,WAAA,IAAA,CALXC,IAKW,CALXA,IAKW,oBAPE,WAOF,WAPE,KAOF,CAAA,IAAA,CAPE,KAOF,CAPE,KAOF,CAAA,IAAA,CAPE,KAOF,cAAA,IAAA,CAFXC,OAEW,CAFXA,OAEW,uBAFD,IAEC,cADRC,IACQ,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,UAAA,CAAA,MAAA,CAAA,OAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA,mBACkBG,KAAK,CAALA,MAAAA,CAC3B,GAAIC,uBAAJ,KAAA,CAAmBL,OAAO,CAAA,CAAA,CAD5B,CACE,CAD2BI,CADlB,CACMD,OADN,eACHD,OADG,IAMIK,CAAAA,KANJ,CAKX,KALW,CAMTD,SANS,CAMIC,KANJ,CASXH,KAAK,CAALA,SAAAA,CAAgB,UAAM,CACpBC,sBAAAA,MAAAA,CAAAA,OAAAA,CAAyB,CACvBG,OAAO,CAAER,OAAO,CAAA,CAAA,CADO,CAAA,CAEvBS,QAAQ,CAAE,IAFa,KAAA,CAGvBC,eAAe,CAAE,IAHM,CAAzBL,EAAAA,KAAAA,GADFD,CAAAA,CAMG,CAAA,OAAA,CAAA,OAAA,CANHA,KAMG,CANHA,EAQA,GAAA,CAAA,KAAA,CACEU,wBAAAA,OAAAA,CAAAA,KAAAA,GADF,EAAA,uBAAA,KAAA,CAAQH,eAAR,CAAQA,eAAR,gCAA0BC,KAAK,CAALA,MAAAA,CAAaC,YAAvC,uBAAA,SAAA,CAAA,wBAAA,CAAA,KAAA,CAAA,CAAA,iBAAA,CAAA,CAAA,CAEA,GAAME,CAAAA,SAAS,CAAGC,mBAAAA,eAAAA,EAAAA,OAAAA,GAAAA,aAAAA,CAAlB,aAAA,CAEA,GAAMC,CAAAA,YAAY,CAAGlB,IAAI,CAAzB,CAAA,CAEA,MAEE,CAAA,KAAA,CAAA,aAAA,CAAA,sBAAA,IAAA,CAAA,QAAA,CAAA,CACE,aAAa,CADf,CAAA,CAEE,KAAK,CAAE,CAAA,aAAA,CAAA,aAAA,CAAA,CAEHI,OAFG,CAEHA,OAFG,CAGHQ,eAHG,CAGHA,eAHG,CAIHK,KAAK,CAJF,SAAA,CAKHE,QAAQ,CAAEnB,IAAI,CAAG,GALd,CAAA,CAMAa,KAAK,CAALA,KAAAA,CANA,OAAA,CAAA,CAAA,EAAA,CAAA,CAOHO,UAAU,CAPP,IAAA,CAQHC,MAAM,CARH,IAAA,CASHC,QAAQ,CATL,IAAA,CAUHJ,YAAAA,CAAAA,YAVG,CAAA,CAAA,CAYLK,MAAM,CAZD,SAAA,CAAA,SAAA,CAFT,CAAA,CAAA,IAAA,CAAA,CAAA,QAAA,CAFF,CA9BF,CAAA,C,aAwDeC,uBAAf,KAAeA,C,0BAEf,GAAMD,CAAAA,MAAM,CAAG,wBAAA,MAAA,CAAkB,CAC/BE,SAAS,CAAE,CACTC,SAAS,CADA,UAAA,CAETC,SAAS,CAFA,QAAA,CAGTC,iBAAiB,CAHR,QAAA,CAITC,iBAAiB,CAJR,CAAA,CAKTC,QAAQ,CAAE,QALD,CADoB,CAAlB,CAAf","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { black, white } from '../styles/colors';\nimport { withTheme } from '../core/theming';\n\nconst defaultSize = 20;\n\ntype Props = React.ComponentProps<typeof Animated.Text> & {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  style?: StyleProp<TextStyle>;\n  ref?: React.RefObject<typeof Animated.Text>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Badges are small status descriptors for UI elements.\n * A badge consists of a small circle, typically containing a number or other short set of characters, that appears in proximity to another object.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-1.png\" />\n *     <figcaption>Badge with content</figcaption>\n *   </figure>\n *   <figure>\n *     <img class=\"small\" src=\"screenshots/badge-2.png\" />\n *     <figcaption>Badge without content</figcaption>\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Badge } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <Badge>3</Badge>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Badge = ({\n  children,\n  size = defaultSize,\n  style,\n  theme,\n  visible = true,\n  ...rest\n}: Props) => {\n  const { current: opacity } = React.useRef<Animated.Value>(\n    new Animated.Value(visible ? 1 : 0)\n  );\n\n  const {\n    animation: { scale },\n  } = theme;\n\n  React.useEffect(() => {\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150 * scale,\n      useNativeDriver: true,\n    }).start();\n  }, [visible, opacity, scale]);\n\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? black : white;\n\n  const borderRadius = size / 2;\n\n  return (\n    // @ts-ignore\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          backgroundColor,\n          color: textColor,\n          fontSize: size * 0.5,\n          ...theme.fonts.regular,\n          lineHeight: size,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n};\n\nexport default withTheme(Badge);\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    textAlignVertical: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}