{"ast":null,"code":"var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}var DialogScrollArea=function DialogScrollArea(props){return React.createElement(_reactNative.View,_extends({},props,{style:[styles.container,props.style]}),props.children);};DialogScrollArea.displayName='Dialog.ScrollArea';var styles=_reactNative.StyleSheet.create({container:{borderColor:'rgba(0, 0, 0, .12)',borderTopWidth:_reactNative.StyleSheet.hairlineWidth,borderBottomWidth:_reactNative.StyleSheet.hairlineWidth,paddingHorizontal:24,flexGrow:1,flexShrink:1}});var _default=DialogScrollArea;exports.default=_default;","map":{"version":3,"sources":["DialogScrollArea.tsx"],"names":["DialogScrollArea","props","styles","container","borderColor","borderTopWidth","StyleSheet","borderBottomWidth","paddingHorizontal","flexGrow","flexShrink"],"mappings":"qKAAA,oDACA,yC,uRA+CA,GAAMA,CAAAA,gBAAgB,CAAIC,QAApBD,CAAAA,gBAAoBC,CAAAA,KAAD,QACvB,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,KAAA,CAAA,CAAiB,KAAK,CAAE,CAACC,MAAM,CAAP,SAAA,CAAmBD,KAAK,CAAxB,KAAA,CAAxB,CAAA,CAAA,CACGA,KAAK,CAFV,QACE,CADuB,EAAzB,CAMAD,gBAAgB,CAAhBA,WAAAA,CAAAA,mBAAAA,CAEA,GAAME,CAAAA,MAAM,CAAG,wBAAA,MAAA,CAAkB,CAC/BC,SAAS,CAAE,CACTC,WAAW,CADF,oBAAA,CAETC,cAAc,CAAEC,wBAFP,aAAA,CAGTC,iBAAiB,CAAED,wBAHV,aAAA,CAITE,iBAAiB,CAJR,EAAA,CAKTC,QAAQ,CALC,CAAA,CAMTC,UAAU,CAAE,CANH,CADoB,CAAlB,CAAf,C,aAWA,gB","sourcesContent":["import * as React from 'react';\nimport { View, ViewStyle, StyleSheet, StyleProp } from 'react-native';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `DialogScrollArea`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n};\n\n/**\n * A component to show a scrollable content in a Dialog. The component only provides appropriate styling.\n * For the scrollable content you can use `ScrollView`, `FlatList` etc. depending on your requirement.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img class=\"medium\" src=\"screenshots/dialog-scroll-area.gif\" />\n *   </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ScrollView } from 'react-native';\n * import { Dialog, Portal, Text } from 'react-native-paper';\n *\n * const MyComponent = () => {\n *   const [visible, setVisible] = React.useState(false);\n *\n *   const hideDialog = () => setVisible(false);\n *\n *   return (\n *     <Portal>\n *       <Dialog visible={visible} onDismiss={hideDialog}>\n *         <Dialog.ScrollArea>\n *           <ScrollView contentContainerStyle={{paddingHorizontal: 24}}>\n *             <Text>This is a scrollable area</Text>\n *           </ScrollView>\n *         </Dialog.ScrollArea>\n *       </Dialog>\n *     </Portal>\n *   );\n * };\n *\n * export default MyComponent;\n * ```\n */\nconst DialogScrollArea = (props: Props) => (\n  <View {...props} style={[styles.container, props.style]}>\n    {props.children}\n  </View>\n);\n\nDialogScrollArea.displayName = 'Dialog.ScrollArea';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderColor: 'rgba(0, 0, 0, .12)',\n    borderTopWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: StyleSheet.hairlineWidth,\n    paddingHorizontal: 24,\n    flexGrow: 1,\n    flexShrink: 1,\n  },\n});\n\nexport default DialogScrollArea;\n"]},"metadata":{},"sourceType":"script"}