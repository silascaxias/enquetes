{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _shadow=_interopRequireDefault(require(\"../styles/shadow\"));var _theming=require(\"../core/theming\");var _overlay=_interopRequireDefault(require(\"../styles/overlay\"));function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var Surface=function Surface(_ref){var style=_ref.style,theme=_ref.theme,rest=_objectWithoutProperties(_ref,[\"style\",\"theme\"]);var flattenedStyles=_reactNative.StyleSheet.flatten(style)||{};var _flattenedStyles$elev=flattenedStyles.elevation,elevation=_flattenedStyles$elev===void 0?4:_flattenedStyles$elev;var isDarkTheme=theme.dark,mode=theme.mode,colors=theme.colors;return React.createElement(_reactNative.Animated.View,_extends({},rest,{style:[{backgroundColor:isDarkTheme&&mode==='adaptive'?(0,_overlay.default)(elevation,colors.surface):colors.surface},elevation&&(0,_shadow.default)(elevation),style]}));};var _default=(0,_theming.withTheme)(Surface);exports.default=_default;","map":{"version":3,"sources":["Surface.tsx"],"names":["Surface","theme","rest","flattenedStyles","StyleSheet","elevation","dark","colors","backgroundColor","isDarkTheme","mode","overlay","surface","shadow","withTheme"],"mappings":"wPAAA,oDACA,yCACA,gEACA,wCACA,kE,+9BAyDA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAA,IAAA,CAAsC,IAArC,CAAA,KAAqC,CAAA,IAAA,CAArC,KAAqC,CAA5BC,KAA4B,CAAA,IAAA,CAA5BA,KAA4B,CAAlBC,IAAkB,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,CACpD,GAAMC,CAAAA,eAAe,CAAGC,wBAAAA,OAAAA,CAAAA,KAAAA,GAAxB,EAAA,CADoD,0BAEpD,eAFoD,CAE5CC,SAF4C,CAE5CA,SAF4C,gCAEhC,CAFgC,0BAG9C,CAAA,WAH8C,CAGpD,KAHoD,CAG5CC,IAH4C,CAG9C,IAH8C,CAGpD,KAHoD,CAG9C,IAH8C,CAGnBC,MAHmB,CAGpD,KAHoD,CAGnBA,MAHmB,CAIpD,MAEE,CAAA,KAAA,CAAA,aAAA,CAAA,sBAAA,IAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAAE,CACL,CACEC,eAAe,CACbC,WAAW,EAAIC,IAAI,GAAnBD,UAAAA,CACIE,qBAAO,SAAPA,CAAmBJ,MAAM,CAD7BE,OACIE,CADJF,CAEIF,MAAM,CAACK,OAJf,CADK,CAOLP,SAAS,EAAIQ,oBAPR,SAOQA,CAPR,CAAA,KAAA,CAFT,CAAA,CAAA,CAFF,CAJF,CAAA,C,aAsBeC,uBAAf,OAAeA,C","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, View, StyleProp, ViewStyle } from 'react-native';\nimport shadow from '../styles/shadow';\nimport { withTheme } from '../core/theming';\nimport overlay from '../styles/overlay';\n\ntype Props = React.ComponentPropsWithRef<typeof View> & {\n  /**\n   * Content of the `Surface`.\n   */\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * Surface is a basic container that can give depth to an element with elevation shadow.\n * On dark theme with `adaptive` mode, surface is constructed by also placing a semi-transparent white overlay over a component surface.\n * See [Dark Theme](https://callstack.github.io/react-native-paper/theming.html#dark-theme) for more information.\n * Overlay and shadow can be applied by specifying the `elevation` property both on Android and iOS.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-1.png\" />\n *   <img src=\"screenshots/surface-2.png\" />\n *   <img src=\"screenshots/surface-3.png\" />\n * </div>\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/surface-dark-1.png\" />\n *   <img src=\"screenshots/surface-dark-2.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Surface, Text } from 'react-native-paper';\n * import { StyleSheet } from 'react-native';\n *\n * const MyComponent = () => (\n *   <Surface style={styles.surface}>\n *      <Text>Surface</Text>\n *   </Surface>\n * );\n *\n * export default MyComponent;\n *\n * const styles = StyleSheet.create({\n *   surface: {\n *     padding: 8,\n *     height: 80,\n *     width: 80,\n *     alignItems: 'center',\n *     justifyContent: 'center',\n *     elevation: 4,\n *   },\n * });\n * ```\n */\nconst Surface = ({ style, theme, ...rest }: Props) => {\n  const flattenedStyles = StyleSheet.flatten(style) || {};\n  const { elevation = 4 }: ViewStyle = flattenedStyles;\n  const { dark: isDarkTheme, mode, colors } = theme;\n  return (\n    // @ts-ignore\n    <Animated.View\n      {...rest}\n      style={[\n        {\n          backgroundColor:\n            isDarkTheme && mode === 'adaptive'\n              ? overlay(elevation, colors.surface)\n              : colors.surface,\n        },\n        elevation && shadow(elevation),\n        style,\n      ]}\n    />\n  );\n};\n\nexport default withTheme(Surface);\n"]},"metadata":{},"sourceType":"script"}