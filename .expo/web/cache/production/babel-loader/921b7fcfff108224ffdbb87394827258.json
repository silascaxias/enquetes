{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _color=_interopRequireDefault(require(\"color\"));var _reactNative=require(\"react-native\");var _theming=require(\"../core/theming\");var _colors=require(\"../styles/colors\");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var Divider=function Divider(_ref){var inset=_ref.inset,style=_ref.style,theme=_ref.theme,rest=_objectWithoutProperties(_ref,[\"inset\",\"style\",\"theme\"]);var isDarkTheme=theme.dark;return React.createElement(_reactNative.View,_extends({},rest,{style:[isDarkTheme?styles.dark:styles.light,inset&&styles.inset,style]}));};var styles=_reactNative.StyleSheet.create({light:{backgroundColor:(0,_color.default)(_colors.black).alpha(0.12).rgb().string(),height:_reactNative.StyleSheet.hairlineWidth},dark:{backgroundColor:(0,_color.default)(_colors.white).alpha(0.12).rgb().string(),height:_reactNative.StyleSheet.hairlineWidth},inset:{marginLeft:72}});var _default=(0,_theming.withTheme)(Divider);exports.default=_default;","map":{"version":3,"sources":["Divider.tsx"],"names":["Divider","theme","rest","dark","isDarkTheme","styles","inset","light","backgroundColor","color","height","StyleSheet","hairlineWidth","marginLeft","withTheme"],"mappings":"wPAAA,oDACA,oDACA,yCACA,wCACA,wC,+9BA0CA,GAAMA,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAA,IAAA,CAA6C,IAA5C,CAAA,KAA4C,CAAA,IAAA,CAA5C,KAA4C,CAA5C,KAA4C,CAAA,IAAA,CAA5C,KAA4C,CAA5BC,KAA4B,CAAA,IAAA,CAA5BA,KAA4B,CAAlBC,IAAkB,CAAA,wBAAA,CAAA,IAAA,CAAA,CAAA,OAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA,IAC7CE,CAAAA,WAD6C,CAC3D,KAD2D,CACnDD,IADmD,CAE3D,MACE,CAAA,KAAA,CAAA,aAAA,CAAA,iBAAA,CAAA,QAAA,CAAA,EAAA,CAAA,IAAA,CAAA,CAEE,KAAK,CAAE,CACLC,WAAW,CAAGC,MAAM,CAAT,IAAA,CAAiBA,MAAM,CAD7B,KAAA,CAELC,KAAK,EAAID,MAAM,CAFV,KAAA,CAAA,KAAA,CAFT,CAAA,CAAA,CADF,CAFF,CAAA,CAcA,GAAMA,CAAAA,MAAM,CAAG,wBAAA,MAAA,CAAkB,CAC/BE,KAAK,CAAE,CACLC,eAAe,CAAEC,mBAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADZ,MACYA,EADZ,CAELC,MAAM,CAAEC,wBAAWC,aAFd,CADwB,CAK/BT,IAAI,CAAE,CACJK,eAAe,CAAEC,mBAAAA,aAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,GAAAA,GADb,MACaA,EADb,CAEJC,MAAM,CAAEC,wBAAWC,aAFf,CALyB,CAS/BN,KAAK,CAAE,CACLO,UAAU,CAAE,EADP,CATwB,CAAlB,CAAf,C,aAceC,uBAAf,OAAeA,C","sourcesContent":["import * as React from 'react';\nimport color from 'color';\nimport { StyleSheet, View, ViewStyle, StyleProp } from 'react-native';\nimport { withTheme } from '../core/theming';\nimport { black, white } from '../styles/colors';\nimport type { $RemoveChildren } from '../types';\n\ntype Props = $RemoveChildren<typeof View> & {\n  /**\n   *  Whether divider has a left inset.\n   */\n  inset?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\n/**\n * A divider is a thin, lightweight separator that groups content in lists and page layouts.\n *\n * <div class=\"screenshots\">\n *  <figure>\n *    <img class=\"medium\" src=\"screenshots/divider.png\" />\n *  </figure>\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { View } from 'react-native';\n * import { Divider, Text } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <View>\n *     <Text>Apple</Text>\n *     <Divider />\n *     <Text>Orange</Text>\n *     <Divider />\n *   </View>\n * );\n *\n * export default MyComponent;\n * ```\n */\nconst Divider = ({ inset, style, theme, ...rest }: Props) => {\n  const { dark: isDarkTheme } = theme;\n  return (\n    <View\n      {...rest}\n      style={[\n        isDarkTheme ? styles.dark : styles.light,\n        inset && styles.inset,\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  light: {\n    backgroundColor: color(black).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  dark: {\n    backgroundColor: color(white).alpha(0.12).rgb().string(),\n    height: StyleSheet.hairlineWidth,\n  },\n  inset: {\n    marginLeft: 72,\n  },\n});\n\nexport default withTheme(Divider);\n"]},"metadata":{},"sourceType":"script"}