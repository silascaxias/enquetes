{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.default=createHandler;var _classCallCheck2=_interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));var _createClass2=_interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));var _inherits2=_interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));var _possibleConstructorReturn2=_interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));var _getPrototypeOf2=_interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));var _defineProperty2=_interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));var _extends2=_interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));var _react=_interopRequireDefault(require(\"react\"));var _reactNative=require(\"react-native\");var _areEqual=_interopRequireDefault(require(\"fbjs/lib/areEqual\"));var _RNGestureHandlerModule=_interopRequireDefault(require(\"./RNGestureHandlerModule\"));var _State=_interopRequireDefault(require(\"./State\"));var _stateToPropMappings;function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=(0,_getPrototypeOf2.default)(Derived),result;if(hasNativeReflectConstruct){var NewTarget=(0,_getPrototypeOf2.default)(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return(0,_possibleConstructorReturn2.default)(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}function findNodeHandle(node){if(_reactNative.Platform.OS==='web')return node;return(0,_reactNative.findNodeHandle)(node);}var _NativeModules$UIMana=_reactNative.NativeModules.UIManager,UIManager=_NativeModules$UIMana===void 0?{}:_NativeModules$UIMana;var customGHEventsConfig={onGestureHandlerEvent:{registrationName:'onGestureHandlerEvent'},onGestureHandlerStateChange:{registrationName:'onGestureHandlerStateChange'}};UIManager.genericDirectEventTypes=(0,_extends2.default)({},UIManager.genericDirectEventTypes,customGHEventsConfig);if(UIManager.getConstants){UIManager.getConstants().genericDirectEventTypes=(0,_extends2.default)({},UIManager.getConstants().genericDirectEventTypes,customGHEventsConfig);}var _UIManager$setJSRespo=UIManager.setJSResponder,oldSetJSResponder=_UIManager$setJSRespo===void 0?function(){}:_UIManager$setJSRespo,_UIManager$clearJSRes=UIManager.clearJSResponder,oldClearJSResponder=_UIManager$clearJSRes===void 0?function(){}:_UIManager$clearJSRes;UIManager.setJSResponder=function(tag,blockNativeResponder){_RNGestureHandlerModule.default.handleSetJSResponder(tag,blockNativeResponder);oldSetJSResponder(tag,blockNativeResponder);};UIManager.clearJSResponder=function(){_RNGestureHandlerModule.default.handleClearJSResponder();oldClearJSResponder();};var handlerTag=1;var handlerIDToTag={};function isConfigParam(param,name){return param!==undefined&&(param!==Object(param)||!('__isNative'in param))&&name!=='onHandlerStateChange'&&name!=='onGestureEvent';}function filterConfig(props,validProps){var defaults=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var res=(0,_extends2.default)({},defaults);Object.keys(validProps).forEach(function(key){var value=props[key];if(isConfigParam(value,key)){var _value=props[key];if(key==='simultaneousHandlers'||key==='waitFor'){_value=transformIntoHandlerTags(props[key]);}else if(key==='hitSlop'){if(typeof _value!=='object'){_value={top:_value,left:_value,bottom:_value,right:_value};}}res[key]=_value;}});return res;}function transformIntoHandlerTags(handlerIDs){if(!Array.isArray(handlerIDs)){handlerIDs=[handlerIDs];}if(_reactNative.Platform.OS==='web'){return handlerIDs.map(function(_ref){var current=_ref.current;return current;}).filter(function(handle){return handle;});}return handlerIDs.map(function(handlerID){return handlerIDToTag[handlerID]||handlerID.current&&handlerID.current._handlerTag||-1;}).filter(function(handlerTag){return handlerTag>0;});}function hasUnresolvedRefs(props){var extract=function extract(refs){if(!Array.isArray(refs)){return refs&&refs.current===null;}return refs.some(function(r){return r&&r.current===null;});};return extract(props['simultaneousHandlers'])||extract(props['waitFor']);}var stateToPropMappings=(_stateToPropMappings={},(0,_defineProperty2.default)(_stateToPropMappings,_State.default.BEGAN,'onBegan'),(0,_defineProperty2.default)(_stateToPropMappings,_State.default.FAILED,'onFailed'),(0,_defineProperty2.default)(_stateToPropMappings,_State.default.CANCELLED,'onCancelled'),(0,_defineProperty2.default)(_stateToPropMappings,_State.default.ACTIVE,'onActivated'),(0,_defineProperty2.default)(_stateToPropMappings,_State.default.END,'onEnded'),_stateToPropMappings);function createHandler(handlerName){var propTypes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var config=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};var transformProps=arguments.length>3?arguments[3]:undefined;var customNativeProps=arguments.length>4&&arguments[4]!==undefined?arguments[4]:{};var Handler=function(_React$Component){(0,_inherits2.default)(Handler,_React$Component);var _super=_createSuper(Handler);function Handler(props){var _this;(0,_classCallCheck2.default)(this,Handler);_this=_super.call(this,props);_this._onGestureHandlerEvent=function(event){if(event.nativeEvent.handlerTag===_this._handlerTag){_this.props.onGestureEvent&&_this.props.onGestureEvent(event);}else{_this.props.onGestureHandlerEvent&&_this.props.onGestureHandlerEvent(event);}};_this._onGestureHandlerStateChange=function(event){if(event.nativeEvent.handlerTag===_this._handlerTag){_this.props.onHandlerStateChange&&_this.props.onHandlerStateChange(event);var stateEventName=stateToPropMappings[event.nativeEvent.state];if(typeof _this.props[stateEventName]==='function'){_this.props[stateEventName](event);}}else{_this.props.onGestureHandlerStateChange&&_this.props.onGestureHandlerStateChange(event);}};_this._refHandler=function(node){_this._viewNode=node;var child=_react.default.Children.only(_this.props.children);var ref=child.ref;if(ref!==null){if(typeof ref==='function'){ref(node);}else{ref.current=node;}}};_this._createGestureHandler=function(newConfig){_this._config=newConfig;_RNGestureHandlerModule.default.createGestureHandler(handlerName,_this._handlerTag,newConfig);};_this._attachGestureHandler=function(newViewTag){_this._viewTag=newViewTag;_RNGestureHandlerModule.default.attachGestureHandler(_this._handlerTag,newViewTag);};_this._updateGestureHandler=function(newConfig){_this._config=newConfig;_RNGestureHandlerModule.default.updateGestureHandler(_this._handlerTag,newConfig);};_this._handlerTag=handlerTag++;_this._config={};if(props.id){if(handlerIDToTag[props.id]!==undefined){throw new Error(\"Handler with ID \\\"\"+props.id+\"\\\" already registered\");}handlerIDToTag[props.id]=_this._handlerTag;}return _this;}(0,_createClass2.default)(Handler,[{key:\"componentWillUnmount\",value:function componentWillUnmount(){_RNGestureHandlerModule.default.dropGestureHandler(this._handlerTag);if(this._updateEnqueued){clearImmediate(this._updateEnqueued);}if(this.props.id){delete handlerIDToTag[this.props.id];}}},{key:\"componentDidMount\",value:function componentDidMount(){var _this2=this;if(hasUnresolvedRefs(this.props)){this._updateEnqueued=setImmediate(function(){_this2._updateEnqueued=null;_this2._update();});}this._createGestureHandler(filterConfig(transformProps?transformProps(this.props):this.props,(0,_extends2.default)({},this.constructor.propTypes,customNativeProps),config));this._attachGestureHandler(findNodeHandle(this._viewNode));}},{key:\"componentDidUpdate\",value:function componentDidUpdate(){var viewTag=findNodeHandle(this._viewNode);if(this._viewTag!==viewTag){this._attachGestureHandler(viewTag);}this._update();}},{key:\"_update\",value:function _update(){var newConfig=filterConfig(transformProps?transformProps(this.props):this.props,(0,_extends2.default)({},this.constructor.propTypes,customNativeProps),config);if(!(0,_areEqual.default)(this._config,newConfig)){this._updateGestureHandler(newConfig);}}},{key:\"setNativeProps\",value:function setNativeProps(updates){var mergedProps=(0,_extends2.default)({},this.props,updates);var newConfig=filterConfig(transformProps?transformProps(mergedProps):mergedProps,(0,_extends2.default)({},this.constructor.propTypes,customNativeProps),config);this._updateGestureHandler(newConfig);}},{key:\"render\",value:function render(){var gestureEventHandler=this._onGestureHandlerEvent;var _this$props=this.props,onGestureEvent=_this$props.onGestureEvent,onGestureHandlerEvent=_this$props.onGestureHandlerEvent;if(onGestureEvent&&typeof onGestureEvent!=='function'){if(onGestureHandlerEvent){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureEventHandler=this.props.onGestureEvent;}else{if(onGestureHandlerEvent&&typeof onGestureHandlerEvent!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var gestureStateEventHandler=this._onGestureHandlerStateChange;var _this$props2=this.props,onHandlerStateChange=_this$props2.onHandlerStateChange,onGestureHandlerStateChange=_this$props2.onGestureHandlerStateChange;if(onHandlerStateChange&&typeof onHandlerStateChange!=='function'){if(onGestureHandlerStateChange){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}gestureStateEventHandler=this.props.onHandlerStateChange;}else{if(onGestureHandlerStateChange&&typeof onGestureHandlerStateChange!=='function'){throw new Error('Nesting touch handlers with native animated driver is not supported yet');}}var child=_react.default.Children.only(this.props.children);var grandChildren=child.props.children;if(_reactNative.Touchable.TOUCH_TARGET_DEBUG&&child.type&&(child.type==='RNGestureHandlerButton'||child.type.name==='View'||child.type.displayName==='View')){grandChildren=_react.default.Children.toArray(grandChildren);grandChildren.push(_reactNative.Touchable.renderDebugView({color:'mediumspringgreen',hitSlop:child.props.hitSlop}));}return _react.default.cloneElement(child,{ref:this._refHandler,collapsable:false,onGestureHandlerEvent:gestureEventHandler,onGestureHandlerStateChange:gestureStateEventHandler},grandChildren);}}]);return Handler;}(_react.default.Component);Handler.displayName=handlerName;Handler.propTypes=propTypes;return Handler;}","map":{"version":3,"sources":["/Users/scaxias/Projetos/Estudos/Enquetes/node_modules/react-native-gesture-handler/createHandler.js"],"names":["findNodeHandle","node","Platform","OS","NativeModules","UIManager","customGHEventsConfig","onGestureHandlerEvent","registrationName","onGestureHandlerStateChange","genericDirectEventTypes","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","handlerTag","handlerIDToTag","isConfigParam","param","name","undefined","Object","filterConfig","props","validProps","defaults","res","keys","forEach","key","value","transformIntoHandlerTags","top","left","bottom","right","handlerIDs","Array","isArray","map","current","filter","handle","handlerID","_handlerTag","hasUnresolvedRefs","extract","refs","some","r","stateToPropMappings","State","BEGAN","FAILED","CANCELLED","ACTIVE","END","createHandler","handlerName","propTypes","config","transformProps","customNativeProps","Handler","_onGestureHandlerEvent","event","nativeEvent","onGestureEvent","_onGestureHandlerStateChange","onHandlerStateChange","stateEventName","state","_refHandler","_viewNode","child","React","Children","only","children","ref","_createGestureHandler","newConfig","_config","createGestureHandler","_attachGestureHandler","newViewTag","_viewTag","attachGestureHandler","_updateGestureHandler","updateGestureHandler","id","Error","dropGestureHandler","_updateEnqueued","clearImmediate","setImmediate","_update","constructor","viewTag","updates","mergedProps","gestureEventHandler","gestureStateEventHandler","grandChildren","Touchable","TOUCH_TARGET_DEBUG","type","displayName","toArray","push","renderDebugView","color","hitSlop","cloneElement","collapsable","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  findNodeHandle as findNodeHandleRN,\n  NativeModules,\n  Touchable,\n  Platform,\n} from 'react-native';\nimport deepEqual from 'fbjs/lib/areEqual';\nimport RNGestureHandlerModule from './RNGestureHandlerModule';\nimport State from './State';\n\nfunction findNodeHandle(node) {\n  if (Platform.OS === 'web') return node;\n  return findNodeHandleRN(node);\n}\n\nconst { UIManager = {} } = NativeModules;\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManager.genericDirectEventTypes = {\n  ...UIManager.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nif (UIManager.getConstants) {\n  UIManager.getConstants().genericDirectEventTypes = {\n    ...UIManager.getConstants().genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {},\n  clearJSResponder: oldClearJSResponder = () => {},\n} = UIManager;\nUIManager.setJSResponder = (tag, blockNativeResponder) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManager.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet handlerTag = 1;\nconst handlerIDToTag = {};\n\nfunction isConfigParam(param, name) {\n  // param !== Object(param) returns false if `param` is a function\n  // or an object and returns true if `param` is null\n  return (\n    param !== undefined &&\n    (param !== Object(param) || !('__isNative' in param)) &&\n    name !== 'onHandlerStateChange' &&\n    name !== 'onGestureEvent'\n  );\n}\n\nfunction filterConfig(props, validProps, defaults = {}) {\n  const res = { ...defaults };\n  Object.keys(validProps).forEach(key => {\n    const value = props[key];\n    if (isConfigParam(value, key)) {\n      let value = props[key];\n      if (key === 'simultaneousHandlers' || key === 'waitFor') {\n        value = transformIntoHandlerTags(props[key]);\n      } else if (key === 'hitSlop') {\n        if (typeof value !== 'object') {\n          value = { top: value, left: value, bottom: value, right: value };\n        }\n      }\n      res[key] = value;\n    }\n  });\n  return res;\n}\n\nfunction transformIntoHandlerTags(handlerIDs) {\n  if (!Array.isArray(handlerIDs)) {\n    handlerIDs = [handlerIDs];\n  }\n\n  if (Platform.OS === 'web') {\n    return handlerIDs.map(({ current }) => current).filter(handle => handle);\n  }\n  // converts handler string IDs into their numeric tags\n  return handlerIDs\n    .map(\n      handlerID =>\n        handlerIDToTag[handlerID] ||\n        (handlerID.current && handlerID.current._handlerTag) ||\n        -1\n    )\n    .filter(handlerTag => handlerTag > 0);\n}\n\nfunction hasUnresolvedRefs(props) {\n  const extract = refs => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some(r => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n};\n\nexport default function createHandler(\n  handlerName,\n  propTypes = {},\n  config = {},\n  transformProps,\n  customNativeProps = {}\n) {\n  class Handler extends React.Component {\n    static displayName = handlerName;\n\n    static propTypes = propTypes;\n\n    constructor(props) {\n      super(props);\n      this._handlerTag = handlerTag++;\n      this._config = {};\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this._handlerTag;\n      }\n    }\n\n    _onGestureHandlerEvent = event => {\n      if (event.nativeEvent.handlerTag === this._handlerTag) {\n        this.props.onGestureEvent && this.props.onGestureEvent(event);\n      } else {\n        this.props.onGestureHandlerEvent &&\n          this.props.onGestureHandlerEvent(event);\n      }\n    };\n\n    _onGestureHandlerStateChange = event => {\n      if (event.nativeEvent.handlerTag === this._handlerTag) {\n        this.props.onHandlerStateChange &&\n          this.props.onHandlerStateChange(event);\n\n        const stateEventName = stateToPropMappings[event.nativeEvent.state];\n        if (typeof this.props[stateEventName] === 'function') {\n          this.props[stateEventName](event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange &&\n          this.props.onGestureHandlerStateChange(event);\n      }\n    };\n\n    _refHandler = node => {\n      this._viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      const { ref } = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    _createGestureHandler = newConfig => {\n      this._config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        handlerName,\n        this._handlerTag,\n        newConfig\n      );\n    };\n\n    _attachGestureHandler = newViewTag => {\n      this._viewTag = newViewTag;\n\n      RNGestureHandlerModule.attachGestureHandler(this._handlerTag, newViewTag);\n    };\n\n    _updateGestureHandler = newConfig => {\n      this._config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this._handlerTag, newConfig);\n    };\n\n    componentWillUnmount() {\n      RNGestureHandlerModule.dropGestureHandler(this._handlerTag);\n      if (this._updateEnqueued) {\n        clearImmediate(this._updateEnqueued);\n      }\n      if (this.props.id) {\n        delete handlerIDToTag[this.props.id];\n      }\n    }\n\n    componentDidMount() {\n      if (hasUnresolvedRefs(this.props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // setImmediate. This makes it so _update function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        this._updateEnqueued = setImmediate(() => {\n          this._updateEnqueued = null;\n          this._update();\n        });\n      }\n\n      this._createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          { ...this.constructor.propTypes, ...customNativeProps },\n          config\n        )\n      );\n      this._attachGestureHandler(findNodeHandle(this._viewNode));\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this._viewNode);\n      if (this._viewTag !== viewTag) {\n        this._attachGestureHandler(viewTag);\n      }\n      this._update();\n    }\n\n    _update() {\n      const newConfig = filterConfig(\n        transformProps ? transformProps(this.props) : this.props,\n        { ...this.constructor.propTypes, ...customNativeProps },\n        config\n      );\n      if (!deepEqual(this._config, newConfig)) {\n        this._updateGestureHandler(newConfig);\n      }\n    }\n\n    setNativeProps(updates) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        { ...this.constructor.propTypes, ...customNativeProps },\n        config\n      );\n      this._updateGestureHandler(newConfig);\n    }\n\n    render() {\n      let gestureEventHandler = this._onGestureHandlerEvent;\n      const { onGestureEvent, onGestureHandlerEvent } = this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = this.props.onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this._onGestureHandlerStateChange;\n      const { onHandlerStateChange, onGestureHandlerStateChange } = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = this.props.onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      const child = React.Children.only(this.props.children);\n      let grandChildren = child.props.children;\n      if (\n        Touchable.TOUCH_TARGET_DEBUG &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          Touchable.renderDebugView({\n            color: 'mediumspringgreen',\n            hitSlop: child.props.hitSlop,\n          })\n        );\n      }\n      return React.cloneElement(\n        child,\n        {\n          ref: this._refHandler,\n          collapsable: false,\n          onGestureHandlerEvent: gestureEventHandler,\n          onGestureHandlerStateChange: gestureStateEventHandler,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"]},"metadata":{},"sourceType":"script"}