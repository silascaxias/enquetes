{"ast":null,"code":"var _interopRequireDefault=require(\"@babel/runtime/helpers/interopRequireDefault\");var _interopRequireWildcard=require(\"@babel/runtime/helpers/interopRequireWildcard\");Object.defineProperty(exports,\"__esModule\",{value:true});exports.RadioButtonAndroid=exports.default=void 0;var React=_interopRequireWildcard(require(\"react\"));var _reactNative=require(\"react-native\");var _color=_interopRequireDefault(require(\"color\"));var _RadioButtonGroup=require(\"./RadioButtonGroup\");var _utils=require(\"./utils\");var _TouchableRipple=_interopRequireDefault(require(\"../TouchableRipple/TouchableRipple\"));var _theming=require(\"../../core/theming\");function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}function _objectWithoutProperties(source,excluded){if(source==null)return{};var target=_objectWithoutPropertiesLoose(source,excluded);var key,i;if(Object.getOwnPropertySymbols){var sourceSymbolKeys=Object.getOwnPropertySymbols(source);for(i=0;i<sourceSymbolKeys.length;i++){key=sourceSymbolKeys[i];if(excluded.indexOf(key)>=0)continue;if(!Object.prototype.propertyIsEnumerable.call(source,key))continue;target[key]=source[key];}}return target;}function _objectWithoutPropertiesLoose(source,excluded){if(source==null)return{};var target={};var sourceKeys=Object.keys(source);var key,i;for(i=0;i<sourceKeys.length;i++){key=sourceKeys[i];if(excluded.indexOf(key)>=0)continue;target[key]=source[key];}return target;}var BORDER_WIDTH=2;var RadioButtonAndroid=function RadioButtonAndroid(_ref){var disabled=_ref.disabled,onPress=_ref.onPress,theme=_ref.theme,value=_ref.value,status=_ref.status,rest=_objectWithoutProperties(_ref,[\"disabled\",\"onPress\",\"theme\",\"value\",\"status\"]);var _React$useRef=React.useRef(new _reactNative.Animated.Value(BORDER_WIDTH)),borderAnim=_React$useRef.current;var _React$useRef2=React.useRef(new _reactNative.Animated.Value(1)),radioAnim=_React$useRef2.current;var scale=theme.animation.scale;React.useEffect(function(){if(status==='checked'){radioAnim.setValue(1.2);_reactNative.Animated.timing(radioAnim,{toValue:1,duration:150*scale,useNativeDriver:true}).start();}else{borderAnim.setValue(10);_reactNative.Animated.timing(borderAnim,{toValue:BORDER_WIDTH,duration:150*scale,useNativeDriver:false}).start();}},[status,borderAnim,radioAnim,scale]);var checkedColor=rest.color||theme.colors.accent;var uncheckedColor=rest.uncheckedColor||(0,_color.default)(theme.colors.text).alpha(theme.dark?0.7:0.54).rgb().string();var rippleColor,radioColor;return React.createElement(_RadioButtonGroup.RadioButtonContext.Consumer,null,function(context){var checked=(0,_utils.isChecked)({contextValue:context===null||context===void 0?void 0:context.value,status:status,value:value})==='checked';if(disabled){rippleColor=(0,_color.default)(theme.colors.text).alpha(0.16).rgb().string();radioColor=theme.colors.disabled;}else{rippleColor=(0,_color.default)(checkedColor).fade(0.32).rgb().string();radioColor=checked?checkedColor:uncheckedColor;}return React.createElement(_TouchableRipple.default,_extends({},rest,{borderless:true,rippleColor:rippleColor,onPress:disabled?undefined:function(){(0,_utils.handlePress)({onPress:onPress,onValueChange:context===null||context===void 0?void 0:context.onValueChange,value:value});},accessibilityTraits:disabled?['button','disabled']:'button',accessibilityComponentType:checked?'radiobutton_checked':'radiobutton_unchecked',accessibilityRole:\"button\",accessibilityState:{disabled:disabled},accessibilityLiveRegion:\"polite\",style:styles.container}),React.createElement(_reactNative.Animated.View,{style:[styles.radio,{borderColor:radioColor,borderWidth:borderAnim}]},checked?React.createElement(_reactNative.View,{style:[_reactNative.StyleSheet.absoluteFill,styles.radioContainer]},React.createElement(_reactNative.Animated.View,{style:[styles.dot,{backgroundColor:radioColor,transform:[{scale:radioAnim}]}]})):null));});};exports.RadioButtonAndroid=RadioButtonAndroid;RadioButtonAndroid.displayName='RadioButton.Android';var styles=_reactNative.StyleSheet.create({container:{borderRadius:18},radioContainer:{alignItems:'center',justifyContent:'center'},radio:{height:20,width:20,borderRadius:10,margin:8},dot:{height:10,width:10,borderRadius:5}});var _default=(0,_theming.withTheme)(RadioButtonAndroid);exports.default=_default;","map":{"version":3,"sources":["RadioButtonAndroid.tsx"],"names":["BORDER_WIDTH","RadioButtonAndroid","status","rest","current","borderAnim","React","Animated","radioAnim","scale","theme","toValue","duration","useNativeDriver","checkedColor","uncheckedColor","color","context","checked","contextValue","value","rippleColor","radioColor","disabled","handlePress","onPress","onValueChange","styles","container","borderColor","borderWidth","StyleSheet","backgroundColor","transform","borderRadius","radioContainer","alignItems","justifyContent","radio","height","width","margin","dot","withTheme"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, View, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { RadioButtonContext, RadioButtonContextType } from './RadioButtonGroup';\nimport { handlePress, isChecked } from './utils';\nimport TouchableRipple from '../TouchableRipple/TouchableRipple';\nimport { withTheme } from '../../core/theming';\nimport type { $RemoveChildren } from '../../types';\n\ntype Props = $RemoveChildren<typeof TouchableRipple> & {\n  /**\n   * Value of the radio button\n   */\n  value: string;\n  /**\n   * Status of radio button.\n   */\n  status?: 'checked' | 'unchecked';\n  /**\n   * Whether radio is disabled.\n   */\n  disabled?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress?: (param?: any) => void;\n  /**\n   * Custom color for unchecked radio.\n   */\n  uncheckedColor?: string;\n  /**\n   * Custom color for radio.\n   */\n  color?: string;\n  /**\n   * @optional\n   */\n  theme: ReactNativePaper.Theme;\n};\n\nconst BORDER_WIDTH = 2;\n\n/**\n * Radio buttons allow the selection a single option from a set.\n * This component follows platform guidelines for Android, but can be used\n * on any platform.\n *\n * <div class=\"screenshots\">\n *   <figure>\n *     <img src=\"screenshots/radio-enabled.android.png\" />\n *     <figcaption>Enabled</figcaption>\n *   </figure>\n *   <figure>\n *     <img src=\"screenshots/radio-disabled.android.png\" />\n *     <figcaption>Disabled</figcaption>\n *   </figure>\n * </div>\n */\nconst RadioButtonAndroid = ({\n  disabled,\n  onPress,\n  theme,\n  value,\n  status,\n  ...rest\n}: Props) => {\n  const { current: borderAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(BORDER_WIDTH)\n  );\n\n  const { current: radioAnim } = React.useRef<Animated.Value>(\n    new Animated.Value(1)\n  );\n\n  const { scale } = theme.animation;\n\n  React.useEffect(() => {\n    if (status === 'checked') {\n      radioAnim.setValue(1.2);\n\n      Animated.timing(radioAnim, {\n        toValue: 1,\n        duration: 150 * scale,\n        useNativeDriver: true,\n      }).start();\n    } else {\n      borderAnim.setValue(10);\n\n      Animated.timing(borderAnim, {\n        toValue: BORDER_WIDTH,\n        duration: 150 * scale,\n        useNativeDriver: false,\n      }).start();\n    }\n  }, [status, borderAnim, radioAnim, scale]);\n\n  const checkedColor = rest.color || theme.colors.accent;\n  const uncheckedColor =\n    rest.uncheckedColor ||\n    color(theme.colors.text)\n      .alpha(theme.dark ? 0.7 : 0.54)\n      .rgb()\n      .string();\n\n  let rippleColor: string, radioColor: string;\n\n  return (\n    <RadioButtonContext.Consumer>\n      {(context?: RadioButtonContextType) => {\n        const checked =\n          isChecked({\n            contextValue: context?.value,\n            status,\n            value,\n          }) === 'checked';\n\n        if (disabled) {\n          rippleColor = color(theme.colors.text).alpha(0.16).rgb().string();\n          radioColor = theme.colors.disabled;\n        } else {\n          rippleColor = color(checkedColor).fade(0.32).rgb().string();\n          radioColor = checked ? checkedColor : uncheckedColor;\n        }\n\n        return (\n          <TouchableRipple\n            {...rest}\n            borderless\n            rippleColor={rippleColor}\n            onPress={\n              disabled\n                ? undefined\n                : () => {\n                    handlePress({\n                      onPress,\n                      onValueChange: context?.onValueChange,\n                      value,\n                    });\n                  }\n            }\n            accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n            accessibilityComponentType={\n              checked ? 'radiobutton_checked' : 'radiobutton_unchecked'\n            }\n            accessibilityRole=\"button\"\n            accessibilityState={{ disabled }}\n            accessibilityLiveRegion=\"polite\"\n            style={styles.container}\n          >\n            <Animated.View\n              style={[\n                styles.radio,\n                {\n                  borderColor: radioColor,\n                  borderWidth: borderAnim,\n                },\n              ]}\n            >\n              {checked ? (\n                <View style={[StyleSheet.absoluteFill, styles.radioContainer]}>\n                  <Animated.View\n                    style={[\n                      styles.dot,\n                      {\n                        backgroundColor: radioColor,\n                        transform: [{ scale: radioAnim }],\n                      },\n                    ]}\n                  />\n                </View>\n              ) : null}\n            </Animated.View>\n          </TouchableRipple>\n        );\n      }}\n    </RadioButtonContext.Consumer>\n  );\n};\n\nRadioButtonAndroid.displayName = 'RadioButton.Android';\n\nconst styles = StyleSheet.create({\n  container: {\n    borderRadius: 18,\n  },\n  radioContainer: {\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  radio: {\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    margin: 8,\n  },\n  dot: {\n    height: 10,\n    width: 10,\n    borderRadius: 5,\n  },\n});\n\nexport default withTheme(RadioButtonAndroid);\n\n// @component-docs ignore-next-line\nexport { RadioButtonAndroid };\n"]},"metadata":{},"sourceType":"script"}